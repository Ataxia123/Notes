/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/@simonwep/pickr/dist/pickr.min.js
var require_pickr_min = __commonJS({
  "node_modules/@simonwep/pickr/dist/pickr.min.js"(exports, module2) {
    !function(t, e) {
      typeof exports == "object" && typeof module2 == "object" ? module2.exports = e() : typeof define == "function" && define.amd ? define([], e) : typeof exports == "object" ? exports.Pickr = e() : t.Pickr = e();
    }(self, function() {
      return (() => {
        "use strict";
        var t = { d: (e2, o2) => {
          for (var n2 in o2)
            t.o(o2, n2) && !t.o(e2, n2) && Object.defineProperty(e2, n2, { enumerable: true, get: o2[n2] });
        }, o: (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2), r: (t2) => {
          typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
        } }, e = {};
        t.d(e, { default: () => L });
        var o = {};
        function n(t2, e2, o2, n2, i2 = {}) {
          e2 instanceof HTMLCollection || e2 instanceof NodeList ? e2 = Array.from(e2) : Array.isArray(e2) || (e2 = [e2]), Array.isArray(o2) || (o2 = [o2]);
          for (const s2 of e2)
            for (const e3 of o2)
              s2[t2](e3, n2, __spreadValues({ capture: false }, i2));
          return Array.prototype.slice.call(arguments, 1);
        }
        t.r(o), t.d(o, { adjustableInputNumbers: () => p, createElementFromString: () => r, createFromTemplate: () => a, eventPath: () => l, off: () => s, on: () => i, resolveElement: () => c });
        const i = n.bind(null, "addEventListener"), s = n.bind(null, "removeEventListener");
        function r(t2) {
          const e2 = document.createElement("div");
          return e2.innerHTML = t2.trim(), e2.firstElementChild;
        }
        function a(t2) {
          const e2 = (t3, e3) => {
            const o3 = t3.getAttribute(e3);
            return t3.removeAttribute(e3), o3;
          }, o2 = (t3, n2 = {}) => {
            const i2 = e2(t3, ":obj"), s2 = e2(t3, ":ref"), r2 = i2 ? n2[i2] = {} : n2;
            s2 && (n2[s2] = t3);
            for (const n3 of Array.from(t3.children)) {
              const t4 = e2(n3, ":arr"), i3 = o2(n3, t4 ? {} : r2);
              t4 && (r2[t4] || (r2[t4] = [])).push(Object.keys(i3).length ? i3 : n3);
            }
            return n2;
          };
          return o2(r(t2));
        }
        function l(t2) {
          let e2 = t2.path || t2.composedPath && t2.composedPath();
          if (e2)
            return e2;
          let o2 = t2.target.parentElement;
          for (e2 = [t2.target, o2]; o2 = o2.parentElement; )
            e2.push(o2);
          return e2.push(document, window), e2;
        }
        function c(t2) {
          return t2 instanceof Element ? t2 : typeof t2 == "string" ? t2.split(/>>/g).reduce((t3, e2, o2, n2) => (t3 = t3.querySelector(e2), o2 < n2.length - 1 ? t3.shadowRoot : t3), document) : null;
        }
        function p(t2, e2 = (t3) => t3) {
          function o2(o3) {
            const n2 = [1e-3, 0.01, 0.1][Number(o3.shiftKey || 2 * o3.ctrlKey)] * (o3.deltaY < 0 ? 1 : -1);
            let i2 = 0, s2 = t2.selectionStart;
            t2.value = t2.value.replace(/[\d.]+/g, (t3, o4) => o4 <= s2 && o4 + t3.length >= s2 ? (s2 = o4, e2(Number(t3), n2, i2)) : (i2++, t3)), t2.focus(), t2.setSelectionRange(s2, s2), o3.preventDefault(), t2.dispatchEvent(new Event("input"));
          }
          i(t2, "focus", () => i(window, "wheel", o2, { passive: false })), i(t2, "blur", () => s(window, "wheel", o2));
        }
        const { min: u, max: h, floor: d, round: m } = Math;
        function f(t2, e2, o2) {
          e2 /= 100, o2 /= 100;
          const n2 = d(t2 = t2 / 360 * 6), i2 = t2 - n2, s2 = o2 * (1 - e2), r2 = o2 * (1 - i2 * e2), a2 = o2 * (1 - (1 - i2) * e2), l2 = n2 % 6;
          return [255 * [o2, r2, s2, s2, a2, o2][l2], 255 * [a2, o2, o2, r2, s2, s2][l2], 255 * [s2, s2, a2, o2, o2, r2][l2]];
        }
        function v(t2, e2, o2) {
          const n2 = (2 - (e2 /= 100)) * (o2 /= 100) / 2;
          return n2 !== 0 && (e2 = n2 === 1 ? 0 : n2 < 0.5 ? e2 * o2 / (2 * n2) : e2 * o2 / (2 - 2 * n2)), [t2, 100 * e2, 100 * n2];
        }
        function b(t2, e2, o2) {
          const n2 = u(t2 /= 255, e2 /= 255, o2 /= 255), i2 = h(t2, e2, o2), s2 = i2 - n2;
          let r2, a2;
          if (s2 === 0)
            r2 = a2 = 0;
          else {
            a2 = s2 / i2;
            const n3 = ((i2 - t2) / 6 + s2 / 2) / s2, l2 = ((i2 - e2) / 6 + s2 / 2) / s2, c2 = ((i2 - o2) / 6 + s2 / 2) / s2;
            t2 === i2 ? r2 = c2 - l2 : e2 === i2 ? r2 = 1 / 3 + n3 - c2 : o2 === i2 && (r2 = 2 / 3 + l2 - n3), r2 < 0 ? r2 += 1 : r2 > 1 && (r2 -= 1);
          }
          return [360 * r2, 100 * a2, 100 * i2];
        }
        function y(t2, e2, o2, n2) {
          e2 /= 100, o2 /= 100;
          return [...b(255 * (1 - u(1, (t2 /= 100) * (1 - (n2 /= 100)) + n2)), 255 * (1 - u(1, e2 * (1 - n2) + n2)), 255 * (1 - u(1, o2 * (1 - n2) + n2)))];
        }
        function g(t2, e2, o2) {
          e2 /= 100;
          const n2 = 2 * (e2 *= (o2 /= 100) < 0.5 ? o2 : 1 - o2) / (o2 + e2) * 100, i2 = 100 * (o2 + e2);
          return [t2, isNaN(n2) ? 0 : n2, i2];
        }
        function _(t2) {
          return b(...t2.match(/.{2}/g).map((t3) => parseInt(t3, 16)));
        }
        function w(t2) {
          t2 = t2.match(/^[a-zA-Z]+$/) ? function(t3) {
            if (t3.toLowerCase() === "black")
              return "#000";
            const e3 = document.createElement("canvas").getContext("2d");
            return e3.fillStyle = t3, e3.fillStyle === "#000" ? null : e3.fillStyle;
          }(t2) : t2;
          const e2 = { cmyk: /^cmyk[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)/i, rgba: /^((rgba)|rgb)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i, hsla: /^((hsla)|hsl)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i, hsva: /^((hsva)|hsv)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i, hexa: /^#?(([\dA-Fa-f]{3,4})|([\dA-Fa-f]{6})|([\dA-Fa-f]{8}))$/i }, o2 = (t3) => t3.map((t4) => /^(|\d+)\.\d+|\d+$/.test(t4) ? Number(t4) : void 0);
          let n2;
          t:
            for (const i2 in e2) {
              if (!(n2 = e2[i2].exec(t2)))
                continue;
              const s2 = (t3) => !!n2[2] == (typeof t3 == "number");
              switch (i2) {
                case "cmyk": {
                  const [, t3, e3, s3, r2] = o2(n2);
                  if (t3 > 100 || e3 > 100 || s3 > 100 || r2 > 100)
                    break t;
                  return { values: y(t3, e3, s3, r2), type: i2 };
                }
                case "rgba": {
                  const [, , , t3, e3, r2, a2] = o2(n2);
                  if (t3 > 255 || e3 > 255 || r2 > 255 || a2 < 0 || a2 > 1 || !s2(a2))
                    break t;
                  return { values: [...b(t3, e3, r2), a2], a: a2, type: i2 };
                }
                case "hexa": {
                  let [, t3] = n2;
                  t3.length !== 4 && t3.length !== 3 || (t3 = t3.split("").map((t4) => t4 + t4).join(""));
                  const e3 = t3.substring(0, 6);
                  let o3 = t3.substring(6);
                  return o3 = o3 ? parseInt(o3, 16) / 255 : void 0, { values: [..._(e3), o3], a: o3, type: i2 };
                }
                case "hsla": {
                  const [, , , t3, e3, r2, a2] = o2(n2);
                  if (t3 > 360 || e3 > 100 || r2 > 100 || a2 < 0 || a2 > 1 || !s2(a2))
                    break t;
                  return { values: [...g(t3, e3, r2), a2], a: a2, type: i2 };
                }
                case "hsva": {
                  const [, , , t3, e3, r2, a2] = o2(n2);
                  if (t3 > 360 || e3 > 100 || r2 > 100 || a2 < 0 || a2 > 1 || !s2(a2))
                    break t;
                  return { values: [t3, e3, r2, a2], a: a2, type: i2 };
                }
              }
            }
          return { values: null, type: null };
        }
        function A(t2 = 0, e2 = 0, o2 = 0, n2 = 1) {
          const i2 = (t3, e3) => (o3 = -1) => e3(~o3 ? t3.map((t4) => Number(t4.toFixed(o3))) : t3), s2 = { h: t2, s: e2, v: o2, a: n2, toHSVA() {
            const t3 = [s2.h, s2.s, s2.v, s2.a];
            return t3.toString = i2(t3, (t4) => `hsva(${t4[0]}, ${t4[1]}%, ${t4[2]}%, ${s2.a})`), t3;
          }, toHSLA() {
            const t3 = [...v(s2.h, s2.s, s2.v), s2.a];
            return t3.toString = i2(t3, (t4) => `hsla(${t4[0]}, ${t4[1]}%, ${t4[2]}%, ${s2.a})`), t3;
          }, toRGBA() {
            const t3 = [...f(s2.h, s2.s, s2.v), s2.a];
            return t3.toString = i2(t3, (t4) => `rgba(${t4[0]}, ${t4[1]}, ${t4[2]}, ${s2.a})`), t3;
          }, toCMYK() {
            const t3 = function(t4, e3, o3) {
              const n3 = f(t4, e3, o3), i3 = n3[0] / 255, s3 = n3[1] / 255, r2 = n3[2] / 255, a2 = u(1 - i3, 1 - s3, 1 - r2);
              return [100 * (a2 === 1 ? 0 : (1 - i3 - a2) / (1 - a2)), 100 * (a2 === 1 ? 0 : (1 - s3 - a2) / (1 - a2)), 100 * (a2 === 1 ? 0 : (1 - r2 - a2) / (1 - a2)), 100 * a2];
            }(s2.h, s2.s, s2.v);
            return t3.toString = i2(t3, (t4) => `cmyk(${t4[0]}%, ${t4[1]}%, ${t4[2]}%, ${t4[3]}%)`), t3;
          }, toHEXA() {
            const t3 = function(t4, e4, o3) {
              return f(t4, e4, o3).map((t5) => m(t5).toString(16).padStart(2, "0"));
            }(s2.h, s2.s, s2.v), e3 = s2.a >= 1 ? "" : Number((255 * s2.a).toFixed(0)).toString(16).toUpperCase().padStart(2, "0");
            return e3 && t3.push(e3), t3.toString = () => `#${t3.join("").toUpperCase()}`, t3;
          }, clone: () => A(s2.h, s2.s, s2.v, s2.a) };
          return s2;
        }
        const C = (t2) => Math.max(Math.min(t2, 1), 0);
        function $(t2) {
          const e2 = { options: Object.assign({ lock: null, onchange: () => 0, onstop: () => 0 }, t2), _keyboard(t3) {
            const { options: o3 } = e2, { type: n3, key: i2 } = t3;
            if (document.activeElement === o3.wrapper) {
              const { lock: o4 } = e2.options, s2 = i2 === "ArrowUp", r3 = i2 === "ArrowRight", a2 = i2 === "ArrowDown", l2 = i2 === "ArrowLeft";
              if (n3 === "keydown" && (s2 || r3 || a2 || l2)) {
                let n4 = 0, i3 = 0;
                o4 === "v" ? n4 = s2 || r3 ? 1 : -1 : o4 === "h" ? n4 = s2 || r3 ? -1 : 1 : (i3 = s2 ? -1 : a2 ? 1 : 0, n4 = l2 ? -1 : r3 ? 1 : 0), e2.update(C(e2.cache.x + 0.01 * n4), C(e2.cache.y + 0.01 * i3)), t3.preventDefault();
              } else
                i2.startsWith("Arrow") && (e2.options.onstop(), t3.preventDefault());
            }
          }, _tapstart(t3) {
            i(document, ["mouseup", "touchend", "touchcancel"], e2._tapstop), i(document, ["mousemove", "touchmove"], e2._tapmove), t3.cancelable && t3.preventDefault(), e2._tapmove(t3);
          }, _tapmove(t3) {
            const { options: o3, cache: n3 } = e2, { lock: i2, element: s2, wrapper: r3 } = o3, a2 = r3.getBoundingClientRect();
            let l2 = 0, c2 = 0;
            if (t3) {
              const e3 = t3 && t3.touches && t3.touches[0];
              l2 = t3 ? (e3 || t3).clientX : 0, c2 = t3 ? (e3 || t3).clientY : 0, l2 < a2.left ? l2 = a2.left : l2 > a2.left + a2.width && (l2 = a2.left + a2.width), c2 < a2.top ? c2 = a2.top : c2 > a2.top + a2.height && (c2 = a2.top + a2.height), l2 -= a2.left, c2 -= a2.top;
            } else
              n3 && (l2 = n3.x * a2.width, c2 = n3.y * a2.height);
            i2 !== "h" && (s2.style.left = `calc(${l2 / a2.width * 100}% - ${s2.offsetWidth / 2}px)`), i2 !== "v" && (s2.style.top = `calc(${c2 / a2.height * 100}% - ${s2.offsetHeight / 2}px)`), e2.cache = { x: l2 / a2.width, y: c2 / a2.height };
            const p2 = C(l2 / a2.width), u2 = C(c2 / a2.height);
            switch (i2) {
              case "v":
                return o3.onchange(p2);
              case "h":
                return o3.onchange(u2);
              default:
                return o3.onchange(p2, u2);
            }
          }, _tapstop() {
            e2.options.onstop(), s(document, ["mouseup", "touchend", "touchcancel"], e2._tapstop), s(document, ["mousemove", "touchmove"], e2._tapmove);
          }, trigger() {
            e2._tapmove();
          }, update(t3 = 0, o3 = 0) {
            const { left: n3, top: i2, width: s2, height: r3 } = e2.options.wrapper.getBoundingClientRect();
            e2.options.lock === "h" && (o3 = t3), e2._tapmove({ clientX: n3 + s2 * t3, clientY: i2 + r3 * o3 });
          }, destroy() {
            const { options: t3, _tapstart: o3, _keyboard: n3 } = e2;
            s(document, ["keydown", "keyup"], n3), s([t3.wrapper, t3.element], "mousedown", o3), s([t3.wrapper, t3.element], "touchstart", o3, { passive: false });
          } }, { options: o2, _tapstart: n2, _keyboard: r2 } = e2;
          return i([o2.wrapper, o2.element], "mousedown", n2), i([o2.wrapper, o2.element], "touchstart", n2, { passive: false }), i(document, ["keydown", "keyup"], r2), e2;
        }
        function k(t2 = {}) {
          t2 = Object.assign({ onchange: () => 0, className: "", elements: [] }, t2);
          const e2 = i(t2.elements, "click", (e3) => {
            t2.elements.forEach((o2) => o2.classList[e3.target === o2 ? "add" : "remove"](t2.className)), t2.onchange(e3), e3.stopPropagation();
          });
          return { destroy: () => s(...e2) };
        }
        const S = { variantFlipOrder: { start: "sme", middle: "mse", end: "ems" }, positionFlipOrder: { top: "tbrl", right: "rltb", bottom: "btrl", left: "lrbt" }, position: "bottom", margin: 8 }, O = (t2, e2, o2) => {
          const { container: n2, margin: i2, position: s2, variantFlipOrder: r2, positionFlipOrder: a2 } = __spreadValues(__spreadValues({ container: document.documentElement.getBoundingClientRect() }, S), o2), { left: l2, top: c2 } = e2.style;
          e2.style.left = "0", e2.style.top = "0";
          const p2 = t2.getBoundingClientRect(), u2 = e2.getBoundingClientRect(), h2 = { t: p2.top - u2.height - i2, b: p2.bottom + i2, r: p2.right + i2, l: p2.left - u2.width - i2 }, d2 = { vs: p2.left, vm: p2.left + p2.width / 2 + -u2.width / 2, ve: p2.left + p2.width - u2.width, hs: p2.top, hm: p2.bottom - p2.height / 2 - u2.height / 2, he: p2.bottom - u2.height }, [m2, f2 = "middle"] = s2.split("-"), v2 = a2[m2], b2 = r2[f2], { top: y2, left: g2, bottom: _2, right: w2 } = n2;
          for (const t3 of v2) {
            const o3 = t3 === "t" || t3 === "b", n3 = h2[t3], [i3, s3] = o3 ? ["top", "left"] : ["left", "top"], [r3, a3] = o3 ? [u2.height, u2.width] : [u2.width, u2.height], [l3, c3] = o3 ? [_2, w2] : [w2, _2], [p3, m3] = o3 ? [y2, g2] : [g2, y2];
            if (!(n3 < p3 || n3 + r3 > l3))
              for (const r4 of b2) {
                const l4 = d2[(o3 ? "v" : "h") + r4];
                if (!(l4 < m3 || l4 + a3 > c3))
                  return e2.style[s3] = l4 - u2[s3] + "px", e2.style[i3] = n3 - u2[i3] + "px", t3 + r4;
              }
          }
          return e2.style.left = l2, e2.style.top = c2, null;
        };
        function E(t2, e2, o2) {
          return e2 in t2 ? Object.defineProperty(t2, e2, { value: o2, enumerable: true, configurable: true, writable: true }) : t2[e2] = o2, t2;
        }
        class L {
          constructor(t2) {
            E(this, "_initializingActive", true), E(this, "_recalc", true), E(this, "_nanopop", null), E(this, "_root", null), E(this, "_color", A()), E(this, "_lastColor", A()), E(this, "_swatchColors", []), E(this, "_setupAnimationFrame", null), E(this, "_eventListener", { init: [], save: [], hide: [], show: [], clear: [], change: [], changestop: [], cancel: [], swatchselect: [] }), this.options = t2 = Object.assign(__spreadValues({}, L.DEFAULT_OPTIONS), t2);
            const { swatches: e2, components: o2, theme: n2, sliders: i2, lockOpacity: s2, padding: r2 } = t2;
            ["nano", "monolith"].includes(n2) && !i2 && (t2.sliders = "h"), o2.interaction || (o2.interaction = {});
            const { preview: a2, opacity: l2, hue: c2, palette: p2 } = o2;
            o2.opacity = !s2 && l2, o2.palette = p2 || a2 || l2 || c2, this._preBuild(), this._buildComponents(), this._bindEvents(), this._finalBuild(), e2 && e2.length && e2.forEach((t3) => this.addSwatch(t3));
            const { button: u2, app: h2 } = this._root;
            this._nanopop = ((t3, e3, o3) => {
              const n3 = typeof t3 != "object" || t3 instanceof HTMLElement ? __spreadValues({ reference: t3, popper: e3 }, o3) : t3;
              return { update(t4 = n3) {
                const { reference: e4, popper: o4 } = Object.assign(n3, t4);
                if (!o4 || !e4)
                  throw new Error("Popper- or reference-element missing.");
                return O(e4, o4, n3);
              } };
            })(u2, h2, { margin: r2 }), u2.setAttribute("role", "button"), u2.setAttribute("aria-label", this._t("btn:toggle"));
            const d2 = this;
            this._setupAnimationFrame = requestAnimationFrame(function e3() {
              if (!h2.offsetWidth)
                return requestAnimationFrame(e3);
              d2.setColor(t2.default), d2._rePositioningPicker(), t2.defaultRepresentation && (d2._representation = t2.defaultRepresentation, d2.setColorRepresentation(d2._representation)), t2.showAlways && d2.show(), d2._initializingActive = false, d2._emit("init");
            });
          }
          _preBuild() {
            const { options: t2 } = this;
            for (const e2 of ["el", "container"])
              t2[e2] = c(t2[e2]);
            this._root = ((t3) => {
              const { components: e2, useAsButton: o2, inline: n2, appClass: i2, theme: s2, lockOpacity: r2 } = t3.options, l2 = (t4) => t4 ? "" : 'style="display:none" hidden', c2 = (e3) => t3._t(e3), p2 = a(`
      <div :ref="root" class="pickr">

        ${o2 ? "" : '<button type="button" :ref="button" class="pcr-button"></button>'}

        <div :ref="app" class="pcr-app ${i2 || ""}" data-theme="${s2}" ${n2 ? 'style="position: unset"' : ""} aria-label="${c2("ui:dialog")}" role="window">
          <div class="pcr-selection" ${l2(e2.palette)}>
            <div :obj="preview" class="pcr-color-preview" ${l2(e2.preview)}>
              <button type="button" :ref="lastColor" class="pcr-last-color" aria-label="${c2("btn:last-color")}"></button>
              <div :ref="currentColor" class="pcr-current-color"></div>
            </div>

            <div :obj="palette" class="pcr-color-palette">
              <div :ref="picker" class="pcr-picker"></div>
              <div :ref="palette" class="pcr-palette" tabindex="0" aria-label="${c2("aria:palette")}" role="listbox"></div>
            </div>

            <div :obj="hue" class="pcr-color-chooser" ${l2(e2.hue)}>
              <div :ref="picker" class="pcr-picker"></div>
              <div :ref="slider" class="pcr-hue pcr-slider" tabindex="0" aria-label="${c2("aria:hue")}" role="slider"></div>
            </div>

            <div :obj="opacity" class="pcr-color-opacity" ${l2(e2.opacity)}>
              <div :ref="picker" class="pcr-picker"></div>
              <div :ref="slider" class="pcr-opacity pcr-slider" tabindex="0" aria-label="${c2("aria:opacity")}" role="slider"></div>
            </div>
          </div>

          <div class="pcr-swatches ${e2.palette ? "" : "pcr-last"}" :ref="swatches"></div>

          <div :obj="interaction" class="pcr-interaction" ${l2(Object.keys(e2.interaction).length)}>
            <input :ref="result" class="pcr-result" type="text" spellcheck="false" ${l2(e2.interaction.input)} aria-label="${c2("aria:input")}">

            <input :arr="options" class="pcr-type" data-type="HEXA" value="${r2 ? "HEX" : "HEXA"}" type="button" ${l2(e2.interaction.hex)}>
            <input :arr="options" class="pcr-type" data-type="RGBA" value="${r2 ? "RGB" : "RGBA"}" type="button" ${l2(e2.interaction.rgba)}>
            <input :arr="options" class="pcr-type" data-type="HSLA" value="${r2 ? "HSL" : "HSLA"}" type="button" ${l2(e2.interaction.hsla)}>
            <input :arr="options" class="pcr-type" data-type="HSVA" value="${r2 ? "HSV" : "HSVA"}" type="button" ${l2(e2.interaction.hsva)}>
            <input :arr="options" class="pcr-type" data-type="CMYK" value="CMYK" type="button" ${l2(e2.interaction.cmyk)}>

            <input :ref="save" class="pcr-save" value="${c2("btn:save")}" type="button" ${l2(e2.interaction.save)} aria-label="${c2("aria:btn:save")}">
            <input :ref="cancel" class="pcr-cancel" value="${c2("btn:cancel")}" type="button" ${l2(e2.interaction.cancel)} aria-label="${c2("aria:btn:cancel")}">
            <input :ref="clear" class="pcr-clear" value="${c2("btn:clear")}" type="button" ${l2(e2.interaction.clear)} aria-label="${c2("aria:btn:clear")}">
          </div>
        </div>
      </div>
    `), u2 = p2.interaction;
              return u2.options.find((t4) => !t4.hidden && !t4.classList.add("active")), u2.type = () => u2.options.find((t4) => t4.classList.contains("active")), p2;
            })(this), t2.useAsButton && (this._root.button = t2.el), t2.container.appendChild(this._root.root);
          }
          _finalBuild() {
            const t2 = this.options, e2 = this._root;
            if (t2.container.removeChild(e2.root), t2.inline) {
              const o2 = t2.el.parentElement;
              t2.el.nextSibling ? o2.insertBefore(e2.app, t2.el.nextSibling) : o2.appendChild(e2.app);
            } else
              t2.container.appendChild(e2.app);
            t2.useAsButton ? t2.inline && t2.el.remove() : t2.el.parentNode.replaceChild(e2.root, t2.el), t2.disabled && this.disable(), t2.comparison || (e2.button.style.transition = "none", t2.useAsButton || (e2.preview.lastColor.style.transition = "none")), this.hide();
          }
          _buildComponents() {
            const t2 = this, e2 = this.options.components, o2 = (t2.options.sliders || "v").repeat(2), [n2, i2] = o2.match(/^[vh]+$/g) ? o2 : [], s2 = () => this._color || (this._color = this._lastColor.clone()), r2 = { palette: $({ element: t2._root.palette.picker, wrapper: t2._root.palette.palette, onstop: () => t2._emit("changestop", "slider", t2), onchange(o3, n3) {
              if (!e2.palette)
                return;
              const i3 = s2(), { _root: r3, options: a2 } = t2, { lastColor: l2, currentColor: c2 } = r3.preview;
              t2._recalc && (i3.s = 100 * o3, i3.v = 100 - 100 * n3, i3.v < 0 && (i3.v = 0), t2._updateOutput("slider"));
              const p2 = i3.toRGBA().toString(0);
              this.element.style.background = p2, this.wrapper.style.background = `
                        linear-gradient(to top, rgba(0, 0, 0, ${i3.a}), transparent),
                        linear-gradient(to left, hsla(${i3.h}, 100%, 50%, ${i3.a}), rgba(255, 255, 255, ${i3.a}))
                    `, a2.comparison ? a2.useAsButton || t2._lastColor || l2.style.setProperty("--pcr-color", p2) : (r3.button.style.setProperty("--pcr-color", p2), r3.button.classList.remove("clear"));
              const u2 = i3.toHEXA().toString();
              for (const { el: e3, color: o4 } of t2._swatchColors)
                e3.classList[u2 === o4.toHEXA().toString() ? "add" : "remove"]("pcr-active");
              c2.style.setProperty("--pcr-color", p2);
            } }), hue: $({ lock: i2 === "v" ? "h" : "v", element: t2._root.hue.picker, wrapper: t2._root.hue.slider, onstop: () => t2._emit("changestop", "slider", t2), onchange(o3) {
              if (!e2.hue || !e2.palette)
                return;
              const n3 = s2();
              t2._recalc && (n3.h = 360 * o3), this.element.style.backgroundColor = `hsl(${n3.h}, 100%, 50%)`, r2.palette.trigger();
            } }), opacity: $({ lock: n2 === "v" ? "h" : "v", element: t2._root.opacity.picker, wrapper: t2._root.opacity.slider, onstop: () => t2._emit("changestop", "slider", t2), onchange(o3) {
              if (!e2.opacity || !e2.palette)
                return;
              const n3 = s2();
              t2._recalc && (n3.a = Math.round(100 * o3) / 100), this.element.style.background = `rgba(0, 0, 0, ${n3.a})`, r2.palette.trigger();
            } }), selectable: k({ elements: t2._root.interaction.options, className: "active", onchange(e3) {
              t2._representation = e3.target.getAttribute("data-type").toUpperCase(), t2._recalc && t2._updateOutput("swatch");
            } }) };
            this._components = r2;
          }
          _bindEvents() {
            const { _root: t2, options: e2 } = this, o2 = [i(t2.interaction.clear, "click", () => this._clearColor()), i([t2.interaction.cancel, t2.preview.lastColor], "click", () => {
              this.setHSVA(...(this._lastColor || this._color).toHSVA(), true), this._emit("cancel");
            }), i(t2.interaction.save, "click", () => {
              !this.applyColor() && !e2.showAlways && this.hide();
            }), i(t2.interaction.result, ["keyup", "input"], (t3) => {
              this.setColor(t3.target.value, true) && !this._initializingActive && (this._emit("change", this._color, "input", this), this._emit("changestop", "input", this)), t3.stopImmediatePropagation();
            }), i(t2.interaction.result, ["focus", "blur"], (t3) => {
              this._recalc = t3.type === "blur", this._recalc && this._updateOutput(null);
            }), i([t2.palette.palette, t2.palette.picker, t2.hue.slider, t2.hue.picker, t2.opacity.slider, t2.opacity.picker], ["mousedown", "touchstart"], () => this._recalc = true, { passive: true })];
            if (!e2.showAlways) {
              const n2 = e2.closeWithKey;
              o2.push(i(t2.button, "click", () => this.isOpen() ? this.hide() : this.show()), i(document, "keyup", (t3) => this.isOpen() && (t3.key === n2 || t3.code === n2) && this.hide()), i(document, ["touchstart", "mousedown"], (e3) => {
                this.isOpen() && !l(e3).some((e4) => e4 === t2.app || e4 === t2.button) && this.hide();
              }, { capture: true }));
            }
            if (e2.adjustableNumbers) {
              const e3 = { rgba: [255, 255, 255, 1], hsva: [360, 100, 100, 1], hsla: [360, 100, 100, 1], cmyk: [100, 100, 100, 100] };
              p(t2.interaction.result, (t3, o3, n2) => {
                const i2 = e3[this.getColorRepresentation().toLowerCase()];
                if (i2) {
                  const e4 = i2[n2], s2 = t3 + (e4 >= 100 ? 1e3 * o3 : o3);
                  return s2 <= 0 ? 0 : Number((s2 < e4 ? s2 : e4).toPrecision(3));
                }
                return t3;
              });
            }
            if (e2.autoReposition && !e2.inline) {
              let t3 = null;
              const n2 = this;
              o2.push(i(window, ["scroll", "resize"], () => {
                n2.isOpen() && (e2.closeOnScroll && n2.hide(), t3 === null ? (t3 = setTimeout(() => t3 = null, 100), requestAnimationFrame(function e3() {
                  n2._rePositioningPicker(), t3 !== null && requestAnimationFrame(e3);
                })) : (clearTimeout(t3), t3 = setTimeout(() => t3 = null, 100)));
              }, { capture: true }));
            }
            this._eventBindings = o2;
          }
          _rePositioningPicker() {
            const { options: t2 } = this;
            if (!t2.inline) {
              if (!this._nanopop.update({ container: document.body.getBoundingClientRect(), position: t2.position })) {
                const t3 = this._root.app, e2 = t3.getBoundingClientRect();
                t3.style.top = (window.innerHeight - e2.height) / 2 + "px", t3.style.left = (window.innerWidth - e2.width) / 2 + "px";
              }
            }
          }
          _updateOutput(t2) {
            const { _root: e2, _color: o2, options: n2 } = this;
            if (e2.interaction.type()) {
              const t3 = `to${e2.interaction.type().getAttribute("data-type")}`;
              e2.interaction.result.value = typeof o2[t3] == "function" ? o2[t3]().toString(n2.outputPrecision) : "";
            }
            !this._initializingActive && this._recalc && this._emit("change", o2, t2, this);
          }
          _clearColor(t2 = false) {
            const { _root: e2, options: o2 } = this;
            o2.useAsButton || e2.button.style.setProperty("--pcr-color", "rgba(0, 0, 0, 0.15)"), e2.button.classList.add("clear"), o2.showAlways || this.hide(), this._lastColor = null, this._initializingActive || t2 || (this._emit("save", null), this._emit("clear"));
          }
          _parseLocalColor(t2) {
            const { values: e2, type: o2, a: n2 } = w(t2), { lockOpacity: i2 } = this.options, s2 = n2 !== void 0 && n2 !== 1;
            return e2 && e2.length === 3 && (e2[3] = void 0), { values: !e2 || i2 && s2 ? null : e2, type: o2 };
          }
          _t(t2) {
            return this.options.i18n[t2] || L.I18N_DEFAULTS[t2];
          }
          _emit(t2, ...e2) {
            this._eventListener[t2].forEach((t3) => t3(...e2, this));
          }
          on(t2, e2) {
            return this._eventListener[t2].push(e2), this;
          }
          off(t2, e2) {
            const o2 = this._eventListener[t2] || [], n2 = o2.indexOf(e2);
            return ~n2 && o2.splice(n2, 1), this;
          }
          addSwatch(t2) {
            const { values: e2 } = this._parseLocalColor(t2);
            if (e2) {
              const { _swatchColors: t3, _root: o2 } = this, n2 = A(...e2), s2 = r(`<button type="button" style="--pcr-color: ${n2.toRGBA().toString(0)}" aria-label="${this._t("btn:swatch")}"/>`);
              return o2.swatches.appendChild(s2), t3.push({ el: s2, color: n2 }), this._eventBindings.push(i(s2, "click", () => {
                this.setHSVA(...n2.toHSVA(), true), this._emit("swatchselect", n2), this._emit("change", n2, "swatch", this);
              })), true;
            }
            return false;
          }
          removeSwatch(t2) {
            const e2 = this._swatchColors[t2];
            if (e2) {
              const { el: o2 } = e2;
              return this._root.swatches.removeChild(o2), this._swatchColors.splice(t2, 1), true;
            }
            return false;
          }
          applyColor(t2 = false) {
            const { preview: e2, button: o2 } = this._root, n2 = this._color.toRGBA().toString(0);
            return e2.lastColor.style.setProperty("--pcr-color", n2), this.options.useAsButton || o2.style.setProperty("--pcr-color", n2), o2.classList.remove("clear"), this._lastColor = this._color.clone(), this._initializingActive || t2 || this._emit("save", this._color), this;
          }
          destroy() {
            cancelAnimationFrame(this._setupAnimationFrame), this._eventBindings.forEach((t2) => s(...t2)), Object.keys(this._components).forEach((t2) => this._components[t2].destroy());
          }
          destroyAndRemove() {
            this.destroy();
            const { root: t2, app: e2 } = this._root;
            t2.parentElement && t2.parentElement.removeChild(t2), e2.parentElement.removeChild(e2), Object.keys(this).forEach((t3) => this[t3] = null);
          }
          hide() {
            return !!this.isOpen() && (this._root.app.classList.remove("visible"), this._emit("hide"), true);
          }
          show() {
            return !this.options.disabled && !this.isOpen() && (this._root.app.classList.add("visible"), this._rePositioningPicker(), this._emit("show", this._color), this);
          }
          isOpen() {
            return this._root.app.classList.contains("visible");
          }
          setHSVA(t2 = 360, e2 = 0, o2 = 0, n2 = 1, i2 = false) {
            const s2 = this._recalc;
            if (this._recalc = false, t2 < 0 || t2 > 360 || e2 < 0 || e2 > 100 || o2 < 0 || o2 > 100 || n2 < 0 || n2 > 1)
              return false;
            this._color = A(t2, e2, o2, n2);
            const { hue: r2, opacity: a2, palette: l2 } = this._components;
            return r2.update(t2 / 360), a2.update(n2), l2.update(e2 / 100, 1 - o2 / 100), i2 || this.applyColor(), s2 && this._updateOutput(), this._recalc = s2, true;
          }
          setColor(t2, e2 = false) {
            if (t2 === null)
              return this._clearColor(e2), true;
            const { values: o2, type: n2 } = this._parseLocalColor(t2);
            if (o2) {
              const t3 = n2.toUpperCase(), { options: i2 } = this._root.interaction, s2 = i2.find((e3) => e3.getAttribute("data-type") === t3);
              if (s2 && !s2.hidden)
                for (const t4 of i2)
                  t4.classList[t4 === s2 ? "add" : "remove"]("active");
              return !!this.setHSVA(...o2, e2) && this.setColorRepresentation(t3);
            }
            return false;
          }
          setColorRepresentation(t2) {
            return t2 = t2.toUpperCase(), !!this._root.interaction.options.find((e2) => e2.getAttribute("data-type").startsWith(t2) && !e2.click());
          }
          getColorRepresentation() {
            return this._representation;
          }
          getColor() {
            return this._color;
          }
          getSelectedColor() {
            return this._lastColor;
          }
          getRoot() {
            return this._root;
          }
          disable() {
            return this.hide(), this.options.disabled = true, this._root.button.classList.add("disabled"), this;
          }
          enable() {
            return this.options.disabled = false, this._root.button.classList.remove("disabled"), this;
          }
        }
        return E(L, "utils", o), E(L, "version", "1.8.2"), E(L, "I18N_DEFAULTS", { "ui:dialog": "color picker dialog", "btn:toggle": "toggle color picker dialog", "btn:swatch": "color swatch", "btn:last-color": "use previous color", "btn:save": "Save", "btn:cancel": "Cancel", "btn:clear": "Clear", "aria:btn:save": "save and close", "aria:btn:cancel": "cancel and close", "aria:btn:clear": "clear and close", "aria:input": "color input field", "aria:palette": "color selection area", "aria:hue": "hue selection slider", "aria:opacity": "selection slider" }), E(L, "DEFAULT_OPTIONS", { appClass: null, theme: "classic", useAsButton: false, padding: 8, disabled: false, comparison: true, closeOnScroll: false, outputPrecision: 0, lockOpacity: false, autoReposition: true, container: "body", components: { interaction: {} }, i18n: {}, swatches: null, inline: false, sliders: null, default: "#42445a", defaultRepresentation: null, position: "bottom-middle", adjustableNumbers: true, showAlways: false, closeWithKey: "Escape" }), E(L, "create", (t2) => new L(t2)), e = e.default;
      })();
    });
  }
});

// node_modules/party-js/lib/settings.js
var require_settings = __commonJS({
  "node_modules/party-js/lib/settings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.settings = void 0;
    exports.settings = {
      debug: false,
      gravity: 800,
      zIndex: 99999,
      respectReducedMotion: true
    };
  }
});

// node_modules/party-js/lib/util/config.js
var require_config = __commonJS({
  "node_modules/party-js/lib/util/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.overrideDefaults = void 0;
    function overrideDefaults(defaults, overrides) {
      return Object.assign({}, defaults, overrides);
    }
    exports.overrideDefaults = overrideDefaults;
  }
});

// node_modules/party-js/lib/components/circle.js
var require_circle = __commonJS({
  "node_modules/party-js/lib/components/circle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Circle = void 0;
    var Circle = function() {
      function Circle2(x, y, radius) {
        if (radius === void 0) {
          radius = 0;
        }
        this.x = x;
        this.y = y;
        this.radius = radius;
      }
      Circle2.zero = new Circle2(0, 0);
      return Circle2;
    }();
    exports.Circle = Circle;
  }
});

// node_modules/party-js/lib/systems/math.js
var require_math = __commonJS({
  "node_modules/party-js/lib/systems/math.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.approximately = exports.clamp = exports.invlerp = exports.slerp = exports.lerp = exports.epsilon = exports.rad2deg = exports.deg2rad = void 0;
    exports.deg2rad = Math.PI / 180;
    exports.rad2deg = 180 / Math.PI;
    exports.epsilon = 1e-6;
    function lerp(a, b, t) {
      return (1 - t) * a + t * b;
    }
    exports.lerp = lerp;
    function slerp(a, b, t) {
      return lerp(a, b, (1 - Math.cos(t * Math.PI)) / 2);
    }
    exports.slerp = slerp;
    function invlerp(a, b, v) {
      return (v - a) / (b - a);
    }
    exports.invlerp = invlerp;
    function clamp(value, min, max) {
      return Math.min(max, Math.max(min, value));
    }
    exports.clamp = clamp;
    function approximately(a, b) {
      return Math.abs(a - b) < exports.epsilon;
    }
    exports.approximately = approximately;
  }
});

// node_modules/party-js/lib/components/color.js
var require_color = __commonJS({
  "node_modules/party-js/lib/components/color.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Color = void 0;
    var math_1 = require_math();
    var Color = function() {
      function Color2(r, g, b) {
        this.values = new Float32Array(3);
        this.rgb = [r, g, b];
      }
      Object.defineProperty(Color2.prototype, "r", {
        get: function() {
          return this.values[0];
        },
        set: function(value) {
          this.values[0] = Math.floor(value);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Color2.prototype, "g", {
        get: function() {
          return this.values[1];
        },
        set: function(value) {
          this.values[1] = Math.floor(value);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Color2.prototype, "b", {
        get: function() {
          return this.values[2];
        },
        set: function(value) {
          this.values[2] = Math.floor(value);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Color2.prototype, "rgb", {
        get: function() {
          return [this.r, this.g, this.b];
        },
        set: function(values) {
          this.r = values[0];
          this.g = values[1];
          this.b = values[2];
        },
        enumerable: false,
        configurable: true
      });
      Color2.prototype.mix = function(color, weight) {
        if (weight === void 0) {
          weight = 0.5;
        }
        return new Color2(math_1.lerp(this.r, color.r, weight), math_1.lerp(this.g, color.g, weight), math_1.lerp(this.b, color.b, weight));
      };
      Color2.prototype.toHex = function() {
        var hex = function(v) {
          return v.toString(16).padStart(2, "0");
        };
        return "#" + hex(this.r) + hex(this.g) + hex(this.b);
      };
      Color2.prototype.toString = function() {
        return "rgb(" + this.values.join(", ") + ")";
      };
      Color2.fromHex = function(hex) {
        if (hex.startsWith("#")) {
          hex = hex.substr(1);
        }
        return new Color2(parseInt(hex.substr(0, 2), 16), parseInt(hex.substr(2, 2), 16), parseInt(hex.substr(4, 2), 16));
      };
      Color2.fromHsl = function(h, s, l) {
        h /= 360;
        s /= 100;
        l /= 100;
        if (s === 0) {
          return new Color2(l, l, l);
        } else {
          var hue2rgb = function(p2, q2, t) {
            if (t < 0)
              t += 1;
            if (t > 1)
              t -= 1;
            if (t < 1 / 6)
              return p2 + (q2 - p2) * 6 * t;
            if (t < 1 / 2)
              return q2;
            if (t < 2 / 3)
              return p2 + (q2 - p2) * (2 / 3 - t) * 6;
            return p2;
          };
          var to255 = function(v) {
            return Math.min(255, 256 * v);
          };
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          return new Color2(to255(hue2rgb(p, q, h + 1 / 3)), to255(hue2rgb(p, q, h)), to255(hue2rgb(p, q, h - 1 / 3)));
        }
      };
      Color2.white = new Color2(255, 255, 255);
      Color2.black = new Color2(0, 0, 0);
      return Color2;
    }();
    exports.Color = Color;
  }
});

// node_modules/party-js/lib/components/spline.js
var require_spline = __commonJS({
  "node_modules/party-js/lib/components/spline.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Spline = void 0;
    var math_1 = require_math();
    var Spline = function() {
      function Spline2() {
        var keys = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          keys[_i] = arguments[_i];
        }
        if (keys.length === 0) {
          throw new Error("Splines require at least one key.");
        }
        if (Array.isArray(keys[0])) {
          throw new Error("You are trying to pass an array to the spline constructor, which is not supported. Try to spread the array into the constructor instead.");
        }
        this.keys = keys;
      }
      Spline2.prototype.evaluate = function(time) {
        if (this.keys.length === 0) {
          throw new Error("Attempt to evaluate a spline with no keys.");
        }
        if (this.keys.length === 1) {
          return this.keys[0].value;
        }
        var ascendingKeys = this.keys.sort(function(a, b) {
          return a.time - b.time;
        });
        var upperKeyIndex = ascendingKeys.findIndex(function(g) {
          return g.time > time;
        });
        if (upperKeyIndex === 0) {
          return ascendingKeys[0].value;
        }
        if (upperKeyIndex === -1) {
          return ascendingKeys[ascendingKeys.length - 1].value;
        }
        var lowerKey = ascendingKeys[upperKeyIndex - 1];
        var upperKey = ascendingKeys[upperKeyIndex];
        var containedTime = math_1.invlerp(lowerKey.time, upperKey.time, time);
        return this.interpolate(lowerKey.value, upperKey.value, containedTime);
      };
      return Spline2;
    }();
    exports.Spline = Spline;
  }
});

// node_modules/party-js/lib/components/gradient.js
var require_gradient = __commonJS({
  "node_modules/party-js/lib/components/gradient.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Gradient = void 0;
    var spline_1 = require_spline();
    var Gradient = function(_super) {
      __extends(Gradient2, _super);
      function Gradient2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Gradient2.prototype.interpolate = function(a, b, t) {
        return a.mix(b, t);
      };
      Gradient2.solid = function(color) {
        return new Gradient2({ value: color, time: 0.5 });
      };
      Gradient2.simple = function() {
        var colors = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          colors[_i] = arguments[_i];
        }
        var step = 1 / (colors.length - 1);
        return new (Gradient2.bind.apply(Gradient2, __spreadArray([void 0], colors.map(function(color, index) {
          return {
            value: color,
            time: index * step
          };
        }))))();
      };
      return Gradient2;
    }(spline_1.Spline);
    exports.Gradient = Gradient;
  }
});

// node_modules/party-js/lib/components/numericSpline.js
var require_numericSpline = __commonJS({
  "node_modules/party-js/lib/components/numericSpline.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NumericSpline = void 0;
    var math_1 = require_math();
    var spline_1 = require_spline();
    var NumericSpline = function(_super) {
      __extends(NumericSpline2, _super);
      function NumericSpline2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      NumericSpline2.prototype.interpolate = function(a, b, t) {
        return math_1.slerp(a, b, t);
      };
      return NumericSpline2;
    }(spline_1.Spline);
    exports.NumericSpline = NumericSpline;
  }
});

// node_modules/party-js/lib/components/rect.js
var require_rect = __commonJS({
  "node_modules/party-js/lib/components/rect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Rect = void 0;
    var Rect = function() {
      function Rect2(x, y, width, height) {
        if (width === void 0) {
          width = 0;
        }
        if (height === void 0) {
          height = 0;
        }
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
      }
      Rect2.fromScreen = function() {
        return new Rect2(window.scrollX, window.scrollY, window.innerWidth, window.innerHeight);
      };
      Rect2.fromElement = function(element) {
        var r = element.getBoundingClientRect();
        return new Rect2(window.scrollX + r.x, window.scrollY + r.y, r.width, r.height);
      };
      Rect2.zero = new Rect2(0, 0);
      return Rect2;
    }();
    exports.Rect = Rect;
  }
});

// node_modules/party-js/lib/components/vector.js
var require_vector = __commonJS({
  "node_modules/party-js/lib/components/vector.js"(exports) {
    "use strict";
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Vector = void 0;
    var math_1 = require_math();
    var Vector = function() {
      function Vector2(x, y, z) {
        if (x === void 0) {
          x = 0;
        }
        if (y === void 0) {
          y = 0;
        }
        if (z === void 0) {
          z = 0;
        }
        this.values = new Float32Array(3);
        this.xyz = [x, y, z];
      }
      Object.defineProperty(Vector2.prototype, "x", {
        get: function() {
          return this.values[0];
        },
        set: function(value) {
          this.values[0] = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Vector2.prototype, "y", {
        get: function() {
          return this.values[1];
        },
        set: function(value) {
          this.values[1] = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Vector2.prototype, "z", {
        get: function() {
          return this.values[2];
        },
        set: function(value) {
          this.values[2] = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Vector2.prototype, "xyz", {
        get: function() {
          return [this.x, this.y, this.z];
        },
        set: function(values) {
          this.values[0] = values[0];
          this.values[1] = values[1];
          this.values[2] = values[2];
        },
        enumerable: false,
        configurable: true
      });
      Vector2.prototype.magnitude = function() {
        return Math.sqrt(this.sqrMagnitude());
      };
      Vector2.prototype.sqrMagnitude = function() {
        return this.x * this.x + this.y * this.y + this.z * this.z;
      };
      Vector2.prototype.add = function(vector) {
        return new Vector2(this.x + vector.x, this.y + vector.y, this.z + vector.z);
      };
      Vector2.prototype.subtract = function(vector) {
        return new Vector2(this.x - vector.x, this.y - vector.y, this.z - vector.z);
      };
      Vector2.prototype.scale = function(scalar) {
        if (typeof scalar === "number") {
          return new Vector2(this.x * scalar, this.y * scalar, this.z * scalar);
        } else {
          return new Vector2(this.x * scalar.x, this.y * scalar.y, this.z * scalar.z);
        }
      };
      Vector2.prototype.normalized = function() {
        var magnitude = this.magnitude();
        if (magnitude !== 0) {
          return this.scale(1 / magnitude);
        }
        return new (Vector2.bind.apply(Vector2, __spreadArray([void 0], this.xyz)))();
      };
      Vector2.prototype.angle = function(vector) {
        return math_1.rad2deg * Math.acos((this.x * vector.x + this.y * vector.y + this.z * vector.z) / (this.magnitude() * vector.magnitude()));
      };
      Vector2.prototype.cross = function(vector) {
        return new Vector2(this.y * vector.z - this.z * vector.y, this.z * vector.x - this.x * vector.z, this.x * vector.y - this.y * vector.x);
      };
      Vector2.prototype.dot = function(vector) {
        return this.magnitude() * vector.magnitude() * Math.cos(math_1.deg2rad * this.angle(vector));
      };
      Vector2.prototype.toString = function() {
        return "Vector(" + this.values.join(", ") + ")";
      };
      Vector2.from2dAngle = function(angle) {
        return new Vector2(Math.cos(angle * math_1.deg2rad), Math.sin(angle * math_1.deg2rad));
      };
      Vector2.zero = new Vector2(0, 0, 0);
      Vector2.one = new Vector2(1, 1, 1);
      Vector2.right = new Vector2(1, 0, 0);
      Vector2.up = new Vector2(0, 1, 0);
      Vector2.forward = new Vector2(0, 0, 1);
      return Vector2;
    }();
    exports.Vector = Vector;
  }
});

// node_modules/party-js/lib/components/index.js
var require_components = __commonJS({
  "node_modules/party-js/lib/components/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_circle(), exports);
    __exportStar(require_color(), exports);
    __exportStar(require_gradient(), exports);
    __exportStar(require_numericSpline(), exports);
    __exportStar(require_rect(), exports);
    __exportStar(require_vector(), exports);
  }
});

// node_modules/party-js/lib/util/rotation.js
var require_rotation = __commonJS({
  "node_modules/party-js/lib/util/rotation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.rotationToNormal = void 0;
    var components_1 = require_components();
    var math_1 = require_math();
    function rotationToNormal(rotation) {
      var alpha = rotation.x * math_1.deg2rad;
      var beta = rotation.y * math_1.deg2rad;
      var a = new components_1.Vector(Math.cos(beta), 0, Math.sin(beta));
      var b = new components_1.Vector(0, Math.cos(alpha), Math.sin(alpha));
      return a.cross(b);
    }
    exports.rotationToNormal = rotationToNormal;
  }
});

// node_modules/party-js/lib/util/rules.js
var require_rules = __commonJS({
  "node_modules/party-js/lib/util/rules.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.despawningRules = void 0;
    exports.despawningRules = {
      lifetime: function(particle) {
        return particle.lifetime <= 0;
      },
      bounds: function(particle) {
        var height = document.documentElement.scrollHeight;
        return particle.location.y > height;
      }
    };
  }
});

// node_modules/party-js/lib/util/lazy.js
var require_lazy = __commonJS({
  "node_modules/party-js/lib/util/lazy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Lazy = void 0;
    var Lazy = function() {
      function Lazy2(factory, exists) {
        if (exists === void 0) {
          exists = Lazy2.defaultExists;
        }
        this.factory = factory;
        this.exists = exists;
      }
      Object.defineProperty(Lazy2.prototype, "current", {
        get: function() {
          if (!this.exists(this.value)) {
            this.value = this.factory();
          }
          return this.value;
        },
        enumerable: false,
        configurable: true
      });
      Lazy2.defaultExists = function(value) {
        return typeof value !== "undefined";
      };
      return Lazy2;
    }();
    exports.Lazy = Lazy;
  }
});

// node_modules/party-js/lib/util/index.js
var require_util = __commonJS({
  "node_modules/party-js/lib/util/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_config(), exports);
    __exportStar(require_rotation(), exports);
    __exportStar(require_rules(), exports);
    __exportStar(require_lazy(), exports);
  }
});

// node_modules/party-js/lib/containers.js
var require_containers = __commonJS({
  "node_modules/party-js/lib/containers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.particleContainer = exports.debugContainer = exports.rootContainer = void 0;
    var settings_1 = require_settings();
    var util_1 = require_util();
    var containerPrefix = "party-js-";
    function isContainerActive(container) {
      return container && container.isConnected;
    }
    function makeContainer(name, styles, parent) {
      var container = document.createElement("div");
      container.id = containerPrefix + name;
      Object.assign(container.style, styles);
      return parent.appendChild(container);
    }
    exports.rootContainer = new util_1.Lazy(function() {
      return makeContainer("container", {
        position: "fixed",
        left: "0",
        top: "0",
        height: "100vh",
        width: "100vw",
        pointerEvents: "none",
        userSelect: "none",
        zIndex: settings_1.settings.zIndex.toString()
      }, document.body);
    }, isContainerActive);
    exports.debugContainer = new util_1.Lazy(function() {
      return makeContainer("debug", {
        position: "absolute",
        top: "0",
        left: "0",
        margin: "0.5em",
        padding: "0.5em 1em",
        border: "2px solid rgb(0, 0, 0, 0.2)",
        background: "rgb(0, 0, 0, 0.1)",
        color: "#555",
        fontFamily: "monospace"
      }, exports.rootContainer.current);
    }, isContainerActive);
    exports.particleContainer = new util_1.Lazy(function() {
      return makeContainer("particles", {
        width: "100%",
        height: "100%",
        overflow: "hidden",
        perspective: "1200px"
      }, exports.rootContainer.current);
    }, isContainerActive);
  }
});

// node_modules/party-js/lib/debug.js
var require_debug = __commonJS({
  "node_modules/party-js/lib/debug.js"(exports) {
    "use strict";
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Debug = void 0;
    var containers_1 = require_containers();
    var settings_1 = require_settings();
    var Debug = function() {
      function Debug2(scene) {
        this.scene = scene;
        this.refreshRate = 8;
        this.refreshTimer = 1 / this.refreshRate;
      }
      Debug2.prototype.tick = function(delta) {
        var container = containers_1.debugContainer.current;
        var displayStyle = settings_1.settings.debug ? "block" : "none";
        if (container.style.display !== displayStyle) {
          container.style.display = displayStyle;
        }
        if (!settings_1.settings.debug) {
          return;
        }
        this.refreshTimer += delta;
        if (this.refreshTimer > 1 / this.refreshRate) {
          this.refreshTimer = 0;
          container.innerHTML = this.getDebugInformation(delta).join("<br>");
        }
      };
      Debug2.prototype.getDebugInformation = function(delta) {
        var emitters = this.scene.emitters.length;
        var particles = this.scene.emitters.reduce(function(acc, cur) {
          return acc + cur.particles.length;
        }, 0);
        var infos = [
          "<b>party.js Debug</b>",
          "--------------",
          "FPS: " + Math.round(1 / delta),
          "Emitters: " + emitters,
          "Particles: " + particles
        ];
        var emitterInfos = this.scene.emitters.map(function(emitter) {
          return [
            "\u2B6F: " + (emitter["currentLoop"] + 1) + "/" + (emitter.options.loops >= 0 ? emitter.options.loops : "\u221E"),
            "\u03A3p: " + emitter.particles.length,
            !emitter.isExpired ? "\u03A3t: " + emitter["durationTimer"].toFixed(3) + "s" : "<i>expired</i>"
          ].join(", ");
        });
        infos.push.apply(infos, __spreadArray(["--------------"], emitterInfos));
        return infos;
      };
      return Debug2;
    }();
    exports.Debug = Debug;
  }
});

// node_modules/party-js/lib/systems/random.js
var require_random = __commonJS({
  "node_modules/party-js/lib/systems/random.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomInsideCircle = exports.randomInsideRect = exports.randomUnitVector = exports.pick = exports.randomRange = void 0;
    var components_1 = require_components();
    var math_1 = require_math();
    function randomRange(min, max) {
      if (min === void 0) {
        min = 0;
      }
      if (max === void 0) {
        max = 1;
      }
      return math_1.lerp(min, max, Math.random());
    }
    exports.randomRange = randomRange;
    function pick(arr) {
      return arr.length === 0 ? void 0 : arr[Math.floor(Math.random() * arr.length)];
    }
    exports.pick = pick;
    function randomUnitVector() {
      var theta = randomRange(0, 2 * Math.PI);
      var z = randomRange(-1, 1);
      return new components_1.Vector(Math.sqrt(1 - z * z) * Math.cos(theta), Math.sqrt(1 - z * z) * Math.sin(theta), z);
    }
    exports.randomUnitVector = randomUnitVector;
    function randomInsideRect(rect) {
      return new components_1.Vector(rect.x + randomRange(0, rect.width), rect.y + randomRange(0, rect.height));
    }
    exports.randomInsideRect = randomInsideRect;
    function randomInsideCircle(circle) {
      var theta = randomRange(0, 2 * Math.PI);
      var radius = randomRange(0, circle.radius);
      return new components_1.Vector(circle.x + Math.cos(theta) * radius, circle.y + Math.sin(theta) * radius);
    }
    exports.randomInsideCircle = randomInsideCircle;
  }
});

// node_modules/party-js/lib/systems/variation.js
var require_variation = __commonJS({
  "node_modules/party-js/lib/systems/variation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.gradientSample = exports.splineSample = exports.skewRelative = exports.skew = exports.range = exports.evaluateVariation = void 0;
    var random_1 = require_random();
    function evaluateVariation(variation) {
      if (Array.isArray(variation))
        return random_1.pick(variation);
      if (typeof variation === "function")
        return variation();
      return variation;
    }
    exports.evaluateVariation = evaluateVariation;
    function range(min, max) {
      return function() {
        return random_1.randomRange(min, max);
      };
    }
    exports.range = range;
    function skew(value, amount) {
      return function() {
        return value + random_1.randomRange(-amount, amount);
      };
    }
    exports.skew = skew;
    function skewRelative(value, percentage) {
      return function() {
        return value * (1 + random_1.randomRange(-percentage, percentage));
      };
    }
    exports.skewRelative = skewRelative;
    function splineSample(spline) {
      return function() {
        return spline.evaluate(Math.random());
      };
    }
    exports.splineSample = splineSample;
    function gradientSample(gradient) {
      return splineSample(gradient);
    }
    exports.gradientSample = gradientSample;
  }
});

// node_modules/party-js/lib/particles/options/emitterOptions.js
var require_emitterOptions = __commonJS({
  "node_modules/party-js/lib/particles/options/emitterOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultEmitterOptions = void 0;
    var rules_1 = require_rules();
    function getDefaultEmitterOptions() {
      return {
        duration: 5,
        loops: 1,
        useGravity: true,
        maxParticles: 300,
        despawningRules: [rules_1.despawningRules.lifetime, rules_1.despawningRules.bounds],
        modules: []
      };
    }
    exports.getDefaultEmitterOptions = getDefaultEmitterOptions;
  }
});

// node_modules/party-js/lib/systems/sources.js
var require_sources = __commonJS({
  "node_modules/party-js/lib/systems/sources.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.circleSource = exports.rectSource = exports.mouseSource = exports.elementSource = exports.dynamicSource = void 0;
    var components_1 = require_components();
    var random_1 = require_random();
    function dynamicSource(source) {
      if (source instanceof HTMLElement) {
        return elementSource(source);
      }
      if (source instanceof components_1.Circle) {
        return circleSource(source);
      }
      if (source instanceof components_1.Rect) {
        return rectSource(source);
      }
      if (source instanceof MouseEvent) {
        return mouseSource(source);
      }
      throw new Error("Cannot infer the source type of '" + source + "'.");
    }
    exports.dynamicSource = dynamicSource;
    function elementSource(source) {
      return function() {
        return random_1.randomInsideRect(components_1.Rect.fromElement(source));
      };
    }
    exports.elementSource = elementSource;
    function mouseSource(source) {
      return function() {
        return new components_1.Vector(window.scrollX + source.clientX, window.scrollY + source.clientY);
      };
    }
    exports.mouseSource = mouseSource;
    function rectSource(source) {
      return function() {
        return random_1.randomInsideRect(source);
      };
    }
    exports.rectSource = rectSource;
    function circleSource(source) {
      return function() {
        return random_1.randomInsideCircle(source);
      };
    }
    exports.circleSource = circleSource;
  }
});

// node_modules/party-js/lib/particles/options/emissionOptions.js
var require_emissionOptions = __commonJS({
  "node_modules/party-js/lib/particles/options/emissionOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultEmissionOptions = void 0;
    var components_1 = require_components();
    var sources_1 = require_sources();
    function getDefaultEmissionOptions() {
      return {
        rate: 10,
        angle: 0,
        bursts: [],
        sourceSampler: sources_1.rectSource(components_1.Rect.zero),
        initialLifetime: 5,
        initialSpeed: 5,
        initialSize: 1,
        initialRotation: components_1.Vector.zero,
        initialColor: components_1.Color.white
      };
    }
    exports.getDefaultEmissionOptions = getDefaultEmissionOptions;
  }
});

// node_modules/party-js/lib/particles/options/renderOptions.js
var require_renderOptions = __commonJS({
  "node_modules/party-js/lib/particles/options/renderOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRendererOptions = void 0;
    function getDefaultRendererOptions() {
      return {
        shapeFactory: "square",
        applyColor: defaultApplyColor,
        applyOpacity: defaultApplyOpacity,
        applyLighting: defaultApplyLighting,
        applyTransform: defaultApplyTransform
      };
    }
    exports.getDefaultRendererOptions = getDefaultRendererOptions;
    function defaultApplyColor(color, element) {
      var hex = color.toHex();
      switch (element.nodeName.toLowerCase()) {
        case "div":
          element.style.background = hex;
          break;
        case "svg":
          element.style.fill = element.style.color = hex;
          break;
        default:
          element.style.color = hex;
          break;
      }
    }
    function defaultApplyOpacity(opacity, element) {
      element.style.opacity = opacity.toString();
    }
    function defaultApplyLighting(lighting, element) {
      element.style.filter = "brightness(" + (0.5 + Math.abs(lighting)) + ")";
    }
    function defaultApplyTransform(particle, element) {
      element.style.transform = "translateX(" + (particle.location.x - window.scrollX).toFixed(3) + "px) " + ("translateY(" + (particle.location.y - window.scrollY).toFixed(3) + "px) ") + ("translateZ(" + particle.location.z.toFixed(3) + "px) ") + ("rotateX(" + particle.rotation.x.toFixed(3) + "deg) ") + ("rotateY(" + particle.rotation.y.toFixed(3) + "deg) ") + ("rotateZ(" + particle.rotation.z.toFixed(3) + "deg) ") + ("scale(" + particle.size.toFixed(3) + ")");
    }
  }
});

// node_modules/party-js/lib/particles/options/index.js
var require_options = __commonJS({
  "node_modules/party-js/lib/particles/options/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_emitterOptions(), exports);
    __exportStar(require_emissionOptions(), exports);
    __exportStar(require_renderOptions(), exports);
  }
});

// node_modules/party-js/lib/particles/particle.js
var require_particle = __commonJS({
  "node_modules/party-js/lib/particles/particle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Particle = void 0;
    var components_1 = require_components();
    var config_1 = require_config();
    var Particle = function() {
      function Particle2(options) {
        var populatedOptions = config_1.overrideDefaults({
          lifetime: 0,
          size: 1,
          location: components_1.Vector.zero,
          rotation: components_1.Vector.zero,
          velocity: components_1.Vector.zero,
          color: components_1.Color.white,
          opacity: 1
        }, options);
        this.id = Symbol();
        this.size = this.initialSize = populatedOptions.size;
        this.lifetime = this.initialLifetime = populatedOptions.lifetime;
        this.rotation = this.initialRotation = populatedOptions.rotation;
        this.location = populatedOptions.location;
        this.velocity = populatedOptions.velocity;
        this.color = populatedOptions.color;
        this.opacity = populatedOptions.opacity;
      }
      return Particle2;
    }();
    exports.Particle = Particle;
  }
});

// node_modules/party-js/lib/particles/emitter.js
var require_emitter = __commonJS({
  "node_modules/party-js/lib/particles/emitter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Emitter = void 0;
    var vector_1 = require_vector();
    var settings_1 = require_settings();
    var variation_1 = require_variation();
    var config_1 = require_config();
    var options_1 = require_options();
    var particle_1 = require_particle();
    var Emitter = function() {
      function Emitter2(options) {
        this.particles = [];
        this.currentLoop = 0;
        this.durationTimer = 0;
        this.emissionTimer = 0;
        this.attemptedBurstIndices = [];
        this.options = config_1.overrideDefaults(options_1.getDefaultEmitterOptions(), options === null || options === void 0 ? void 0 : options.emitterOptions);
        this.emission = config_1.overrideDefaults(options_1.getDefaultEmissionOptions(), options === null || options === void 0 ? void 0 : options.emissionOptions);
        this.renderer = config_1.overrideDefaults(options_1.getDefaultRendererOptions(), options === null || options === void 0 ? void 0 : options.rendererOptions);
      }
      Object.defineProperty(Emitter2.prototype, "isExpired", {
        get: function() {
          return this.options.loops >= 0 && this.currentLoop >= this.options.loops;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Emitter2.prototype, "canRemove", {
        get: function() {
          return this.particles.length === 0;
        },
        enumerable: false,
        configurable: true
      });
      Emitter2.prototype.clearParticles = function() {
        return this.particles.splice(0).length;
      };
      Emitter2.prototype.tick = function(delta) {
        if (!this.isExpired) {
          this.durationTimer += delta;
          if (this.durationTimer >= this.options.duration) {
            this.currentLoop++;
            this.durationTimer = 0;
            this.attemptedBurstIndices = [];
          }
          if (!this.isExpired) {
            var burstIndex = 0;
            for (var _i = 0, _a = this.emission.bursts; _i < _a.length; _i++) {
              var burst = _a[_i];
              if (burst.time <= this.durationTimer) {
                if (!this.attemptedBurstIndices.includes(burstIndex)) {
                  var count = variation_1.evaluateVariation(burst.count);
                  for (var i = 0; i < count; i++) {
                    this.emitParticle();
                  }
                  this.attemptedBurstIndices.push(burstIndex);
                }
              }
              burstIndex++;
            }
            this.emissionTimer += delta;
            var delay = 1 / this.emission.rate;
            while (this.emissionTimer > delay) {
              this.emissionTimer -= delay;
              this.emitParticle();
            }
          }
        }
        var _loop_1 = function(i2) {
          var particle = this_1.particles[i2];
          this_1.tickParticle(particle, delta);
          if (this_1.options.despawningRules.some(function(rule) {
            return rule(particle);
          })) {
            this_1.particles.splice(i2, 1);
          }
        };
        var this_1 = this;
        for (var i = this.particles.length - 1; i >= 0; i--) {
          _loop_1(i);
        }
      };
      Emitter2.prototype.tickParticle = function(particle, delta) {
        particle.lifetime -= delta;
        if (this.options.useGravity) {
          particle.velocity = particle.velocity.add(vector_1.Vector.up.scale(settings_1.settings.gravity * delta));
        }
        particle.location = particle.location.add(particle.velocity.scale(delta));
        for (var _i = 0, _a = this.options.modules; _i < _a.length; _i++) {
          var moduleFunction = _a[_i];
          moduleFunction(particle);
        }
      };
      Emitter2.prototype.emitParticle = function() {
        var particle = new particle_1.Particle({
          location: this.emission.sourceSampler(),
          lifetime: variation_1.evaluateVariation(this.emission.initialLifetime),
          velocity: vector_1.Vector.from2dAngle(variation_1.evaluateVariation(this.emission.angle)).scale(variation_1.evaluateVariation(this.emission.initialSpeed)),
          size: variation_1.evaluateVariation(this.emission.initialSize),
          rotation: variation_1.evaluateVariation(this.emission.initialRotation),
          color: variation_1.evaluateVariation(this.emission.initialColor)
        });
        this.particles.push(particle);
        if (this.particles.length > this.options.maxParticles) {
          this.particles.shift();
        }
        return particle;
      };
      return Emitter2;
    }();
    exports.Emitter = Emitter;
  }
});

// node_modules/party-js/lib/systems/shapes.js
var require_shapes = __commonJS({
  "node_modules/party-js/lib/systems/shapes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveShapeFactory = exports.resolvableShapes = void 0;
    var variation_1 = require_variation();
    exports.resolvableShapes = {
      square: '<div style="height: 10px; width: 10px;"></div>',
      rectangle: '<div style="height: 6px; width: 10px;"></div>',
      circle: '<svg viewBox="0 0 2 2" width="10" height="10"><circle cx="1" cy="1" r="1" fill="currentColor"/></svg>',
      roundedSquare: '<div style="height: 10px; width: 10px; border-radius: 3px;"></div>',
      roundedRectangle: '<div style="height: 6px; width: 10px; border-radius: 3px;"></div>',
      star: '<svg viewBox="0 0 512 512" width="15" height="15"><polygon fill="currentColor" points="512,197.816 325.961,185.585 255.898,9.569 185.835,185.585 0,197.816 142.534,318.842 95.762,502.431 255.898,401.21 416.035,502.431 369.263,318.842"/></svg>'
    };
    function resolveShapeFactory(factory) {
      var shape = variation_1.evaluateVariation(factory);
      if (typeof shape === "string") {
        var resolved = exports.resolvableShapes[shape];
        if (!resolved) {
          throw new Error("Failed to resolve shape key '" + shape + "'. Did you forget to add it to the 'resolvableShapes' lookup?");
        }
        var dummy = document.createElement("div");
        dummy.innerHTML = resolved;
        return dummy.firstElementChild;
      }
      return shape;
    }
    exports.resolveShapeFactory = resolveShapeFactory;
  }
});

// node_modules/party-js/lib/particles/renderer.js
var require_renderer = __commonJS({
  "node_modules/party-js/lib/particles/renderer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Renderer = void 0;
    var __1 = require_lib();
    var vector_1 = require_vector();
    var containers_1 = require_containers();
    var shapes_1 = require_shapes();
    var util_1 = require_util();
    var Renderer = function() {
      function Renderer2() {
        this.elements = /* @__PURE__ */ new Map();
        this.light = new vector_1.Vector(0, 0, 1);
        this.enabled = true;
        this.enabled = !__1.settings.respectReducedMotion || !window.matchMedia("(prefers-reduced-motion)").matches;
      }
      Renderer2.prototype.begin = function() {
        this.renderedParticles = [];
      };
      Renderer2.prototype.end = function() {
        var it = this.elements.keys();
        var result = it.next();
        while (!result.done) {
          var id = result.value;
          if (!this.renderedParticles.includes(id)) {
            this.elements.get(id).remove();
            this.elements.delete(id);
          }
          result = it.next();
        }
        return this.renderedParticles.length;
      };
      Renderer2.prototype.renderParticle = function(particle, emitter) {
        if (!this.enabled)
          return;
        var options = emitter.renderer;
        var element = this.elements.has(particle.id) ? this.elements.get(particle.id) : this.createParticleElement(particle, options);
        if (options.applyColor) {
          options.applyColor(particle.color, element);
        }
        if (options.applyOpacity) {
          options.applyOpacity(particle.opacity, element);
        }
        if (options.applyLighting) {
          var normal = util_1.rotationToNormal(particle.rotation);
          var lightingCoefficient = normal.dot(this.light);
          options.applyLighting(lightingCoefficient, element);
        }
        if (options.applyTransform) {
          options.applyTransform(particle, element);
        }
        this.renderedParticles.push(particle.id);
      };
      Renderer2.prototype.createParticleElement = function(particle, options) {
        var resolved = shapes_1.resolveShapeFactory(options.shapeFactory);
        var element = resolved.cloneNode(true);
        element.style.position = "absolute";
        this.elements.set(particle.id, containers_1.particleContainer.current.appendChild(element));
        return element;
      };
      return Renderer2;
    }();
    exports.Renderer = Renderer;
  }
});

// node_modules/party-js/lib/scene.js
var require_scene = __commonJS({
  "node_modules/party-js/lib/scene.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Scene = void 0;
    var debug_1 = require_debug();
    var emitter_1 = require_emitter();
    var renderer_1 = require_renderer();
    var Scene = function() {
      function Scene2() {
        this.emitters = [];
        this.debug = new debug_1.Debug(this);
        this.renderer = new renderer_1.Renderer();
        this.scheduledTickId = void 0;
        this.lastTickTimestamp = performance.now();
        this.tick = this.tick.bind(this);
        this.scheduleTick();
      }
      Scene2.prototype.createEmitter = function(options) {
        var emitter = new emitter_1.Emitter(options);
        this.emitters.push(emitter);
        return emitter;
      };
      Scene2.prototype.clearEmitters = function() {
        return this.emitters.splice(0).length;
      };
      Scene2.prototype.clearParticles = function() {
        return this.emitters.reduce(function(sum, emitter) {
          return sum + emitter.clearParticles();
        }, 0);
      };
      Scene2.prototype.scheduleTick = function() {
        this.scheduledTickId = window.requestAnimationFrame(this.tick);
      };
      Scene2.prototype.cancelTick = function() {
        window.cancelAnimationFrame(this.scheduledTickId);
      };
      Scene2.prototype.tick = function(timestamp) {
        var delta = (timestamp - this.lastTickTimestamp) / 1e3;
        try {
          for (var i = 0; i < this.emitters.length; i++) {
            var emitter = this.emitters[i];
            emitter.tick(delta);
            if (emitter.isExpired && emitter.canRemove) {
              this.emitters.splice(i--, 1);
            }
          }
        } catch (error) {
          console.error(`An error occurred while updating the scene's emitters:
"` + error + '"');
        }
        try {
          this.renderer.begin();
          for (var _i = 0, _a = this.emitters; _i < _a.length; _i++) {
            var emitter = _a[_i];
            for (var _b = 0, _c = emitter.particles; _b < _c.length; _b++) {
              var particle = _c[_b];
              this.renderer.renderParticle(particle, emitter);
            }
          }
          this.renderer.end();
        } catch (error) {
          console.error(`An error occurred while rendering the scene's particles:
"` + error + '"');
        }
        this.debug.tick(delta);
        this.lastTickTimestamp = timestamp;
        this.scheduleTick();
      };
      return Scene2;
    }();
    exports.Scene = Scene;
  }
});

// node_modules/party-js/lib/systems/modules.js
var require_modules = __commonJS({
  "node_modules/party-js/lib/systems/modules.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModuleBuilder = void 0;
    var components_1 = require_components();
    var ModuleBuilder = function() {
      function ModuleBuilder2() {
        this.factor = "lifetime";
        this.isRelative = false;
      }
      ModuleBuilder2.prototype.drive = function(key) {
        this.driverKey = key;
        return this;
      };
      ModuleBuilder2.prototype.through = function(factor) {
        this.factor = factor;
        return this;
      };
      ModuleBuilder2.prototype.by = function(driver) {
        this.driverValue = driver;
        return this;
      };
      ModuleBuilder2.prototype.relative = function(isRelative) {
        if (isRelative === void 0) {
          isRelative = true;
        }
        this.isRelative = isRelative;
        return this;
      };
      ModuleBuilder2.prototype.build = function() {
        var _this = this;
        if (typeof this.driverKey === "undefined") {
          throw new Error("No driving key was provided in the module builder. Did you forget a '.drive()' call?");
        }
        if (typeof this.driverValue === "undefined") {
          throw new Error("No driving value was provided in the module builder. Did you forget a '.through()' call?");
        }
        return function(particle) {
          updateDrivenProperty(particle, _this.driverKey, evaluateModuleDriver(_this.driverValue, calculateModuleFactor(_this.factor, particle), particle), _this.isRelative);
        };
      };
      return ModuleBuilder2;
    }();
    exports.ModuleBuilder = ModuleBuilder;
    function evaluateModuleDriver(driver, factor, particle) {
      if (typeof driver === "object" && "evaluate" in driver) {
        return driver.evaluate(factor);
      }
      if (typeof driver === "function") {
        return driver(factor, particle);
      }
      return driver;
    }
    function calculateModuleFactor(factor, particle) {
      switch (factor) {
        case "lifetime":
          return particle.initialLifetime - particle.lifetime;
        case "relativeLifetime":
          return (particle.initialLifetime - particle.lifetime) / particle.initialLifetime;
        case "size":
          return particle.size;
        default:
          throw new Error("Invalid driving factor '" + factor + "'.");
      }
    }
    function updateDrivenProperty(particle, key, value, relative) {
      if (relative === void 0) {
        relative = false;
      }
      if (!relative) {
        particle[key] = value;
      } else {
        var initial = particle["initial" + key[0].toUpperCase() + key.substr(1)];
        if (typeof initial === "undefined") {
          throw new Error("Unable to use relative chaining with key '" + key + "'; no initial value exists.");
        }
        if (value instanceof components_1.Vector) {
          updateDrivenProperty(particle, key, initial.add(value));
        } else if (typeof value === "number") {
          updateDrivenProperty(particle, key, initial * value);
        } else {
          throw new Error("Unable to use relative chaining with particle key '" + key + "'; no relative operation for '" + value + "' could be inferred.");
        }
      }
    }
  }
});

// node_modules/party-js/lib/templates/confetti.js
var require_confetti = __commonJS({
  "node_modules/party-js/lib/templates/confetti.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.confetti = void 0;
    var __1 = require_lib();
    var components_1 = require_components();
    var modules_1 = require_modules();
    var random = require_random();
    var sources = require_sources();
    var variation = require_variation();
    var util = require_util();
    function confetti(source, options) {
      var populated = util.overrideDefaults({
        count: variation.range(20, 40),
        spread: variation.range(35, 45),
        speed: variation.range(300, 600),
        size: variation.skew(1, 0.2),
        rotation: function() {
          return random.randomUnitVector().scale(180);
        },
        color: function() {
          return components_1.Color.fromHsl(random.randomRange(0, 360), 100, 70);
        },
        modules: [
          new modules_1.ModuleBuilder().drive("size").by(function(t) {
            return Math.min(1, t * 3);
          }).relative().build(),
          new modules_1.ModuleBuilder().drive("rotation").by(function(t) {
            return new components_1.Vector(140, 200, 260).scale(t);
          }).relative().build()
        ],
        shapes: ["square", "circle"]
      }, options);
      var emitter = __1.scene.current.createEmitter({
        emitterOptions: {
          loops: 1,
          duration: 8,
          modules: populated.modules
        },
        emissionOptions: {
          rate: 0,
          bursts: [{ time: 0, count: populated.count }],
          sourceSampler: sources.dynamicSource(source),
          angle: variation.skew(-90, variation.evaluateVariation(populated.spread)),
          initialLifetime: 8,
          initialSpeed: populated.speed,
          initialSize: populated.size,
          initialRotation: populated.rotation,
          initialColor: populated.color
        },
        rendererOptions: {
          shapeFactory: populated.shapes
        }
      });
      return emitter;
    }
    exports.confetti = confetti;
  }
});

// node_modules/party-js/lib/templates/sparkles.js
var require_sparkles = __commonJS({
  "node_modules/party-js/lib/templates/sparkles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sparkles = void 0;
    var __1 = require_lib();
    var components_1 = require_components();
    var modules_1 = require_modules();
    var random = require_random();
    var sources = require_sources();
    var variation = require_variation();
    var util = require_util();
    function sparkles(source, options) {
      var populated = util.overrideDefaults({
        lifetime: variation.range(1, 2),
        count: variation.range(10, 20),
        speed: variation.range(100, 200),
        size: variation.range(0.8, 1.8),
        rotation: function() {
          return new components_1.Vector(0, 0, random.randomRange(0, 360));
        },
        color: function() {
          return components_1.Color.fromHsl(50, 100, random.randomRange(55, 85));
        },
        modules: [
          new modules_1.ModuleBuilder().drive("rotation").by(function(t) {
            return new components_1.Vector(0, 0, 200).scale(t);
          }).relative().build(),
          new modules_1.ModuleBuilder().drive("size").by(new components_1.NumericSpline({ time: 0, value: 0 }, { time: 0.3, value: 1 }, { time: 0.7, value: 1 }, { time: 1, value: 0 })).through("relativeLifetime").relative().build(),
          new modules_1.ModuleBuilder().drive("opacity").by(new components_1.NumericSpline({ time: 0, value: 1 }, { time: 0.5, value: 1 }, { time: 1, value: 0 })).through("relativeLifetime").build()
        ],
        shapes: "star"
      }, options);
      var emitter = __1.scene.current.createEmitter({
        emitterOptions: {
          loops: 1,
          duration: 3,
          useGravity: false,
          modules: populated.modules
        },
        emissionOptions: {
          rate: 0,
          bursts: [{ time: 0, count: populated.count }],
          sourceSampler: sources.dynamicSource(source),
          angle: variation.range(0, 360),
          initialLifetime: populated.lifetime,
          initialSpeed: populated.speed,
          initialSize: populated.size,
          initialRotation: populated.rotation,
          initialColor: populated.color
        },
        rendererOptions: {
          applyLighting: void 0,
          shapeFactory: populated.shapes
        }
      });
      return emitter;
    }
    exports.sparkles = sparkles;
  }
});

// node_modules/party-js/lib/templates/index.js
var require_templates = __commonJS({
  "node_modules/party-js/lib/templates/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_confetti(), exports);
    __exportStar(require_sparkles(), exports);
  }
});

// node_modules/party-js/lib/index.js
var require_lib = __commonJS({
  "node_modules/party-js/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = exports.forceInit = exports.util = exports.math = exports.random = exports.sources = exports.variation = exports.Emitter = exports.Particle = exports.settings = exports.scene = void 0;
    var scene_1 = require_scene();
    var util_1 = require_util();
    __exportStar(require_components(), exports);
    __exportStar(require_templates(), exports);
    __exportStar(require_shapes(), exports);
    __exportStar(require_modules(), exports);
    exports.scene = new util_1.Lazy(function() {
      if (typeof document === "undefined" || typeof window === "undefined") {
        throw new Error("It seems like you are trying to run party.js in a non-browser-like environment, which is not supported.");
      }
      return new scene_1.Scene();
    });
    var settings_1 = require_settings();
    Object.defineProperty(exports, "settings", { enumerable: true, get: function() {
      return settings_1.settings;
    } });
    var particle_1 = require_particle();
    Object.defineProperty(exports, "Particle", { enumerable: true, get: function() {
      return particle_1.Particle;
    } });
    var emitter_1 = require_emitter();
    Object.defineProperty(exports, "Emitter", { enumerable: true, get: function() {
      return emitter_1.Emitter;
    } });
    exports.variation = require_variation();
    exports.sources = require_sources();
    exports.random = require_random();
    exports.math = require_math();
    exports.util = require_util();
    function forceInit() {
      exports.scene.current;
    }
    exports.forceInit = forceInit;
    exports.default = require_lib();
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  DEFAULT_SHAPES: () => DEFAULT_SHAPES,
  default: () => ObsidianParty2
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/effectConfig.ts
var import_pickr = __toESM(require_pickr_min());
var import_obsidian4 = require("obsidian");

// src/settings.ts
var import_obsidian3 = require("obsidian");

// src/customShapes.ts
var import_obsidian2 = require("obsidian");

// src/confirmationModal.ts
var import_obsidian = require("obsidian");
var ConfirmationModal = class extends import_obsidian.Modal {
  constructor(app2, title, confirmCallback) {
    super(app2);
    this.titleEl.setText(title);
    this.contentEl.setText("This action cannot be undone.");
    new import_obsidian.Setting(this.contentEl).addButton((button) => button.setButtonText("Cancel").onClick(() => {
      this.close();
    })).addButton((button) => button.setButtonText("Confirm").onClick(() => {
      confirmCallback();
      this.close();
    }));
    this.open();
  }
};

// src/utils.ts
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function applyColor(element, color) {
  switch (element.nodeName.toLowerCase()) {
    case "div":
      element.style.background = color;
      break;
    case "svg":
      element.style.fill = element.style.color = color;
      break;
    default:
      element.style.color = color;
      break;
  }
}
function isValidHTML(html) {
  if (html.trim() === "")
    return false;
  const template = document.createElement("template");
  template.innerHTML = html;
  return template.content.childNodes.length > 0 && Array.from(template.content.childNodes).every((node) => node.nodeName.toLowerCase() === "svg" || node instanceof HTMLElement && node.style !== void 0);
}

// src/customShapes.ts
var SHAPE_MAX_SIZE = 20;
var COLOR_NORMAL = "var(--party-shape-normal-color)";
var COLOR_RESIZED = "var(--party-shape-resized-color)";
var CustomShapesModal = class extends import_obsidian2.Modal {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
    this.modalEl.addClass("party-shapes-modal");
    this.modalEl.style.setProperty("--max-size", `${SHAPE_MAX_SIZE}px`);
  }
  onOpen() {
    this.display();
  }
  display() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", {
      text: "Custom shapes"
    });
    contentEl.createEl("p", {
      text: `Shapes larger than ${SHAPE_MAX_SIZE}x${SHAPE_MAX_SIZE}px, will be resized only in preview, actual particles will be rendered with original size.`
    });
    contentEl.createEl("p", {
      text: "Helpful websites for creating SVG shapes:"
    });
    contentEl.createEl("ul", void 0, (ul) => {
      ul.createEl("li", void 0, (li) => {
        li.createEl("a", {
          text: "SVG Editor",
          href: "https://yqnn.github.io/svg-path-editor/"
        });
      });
      ul.createEl("li", void 0, (li) => {
        li.createEl("a", {
          text: "SVG Compressor",
          href: "https://jakearchibald.github.io/svgomg/"
        });
      });
      ul.createEl("li", void 0, (li) => {
        li.createEl("a", {
          text: "Simple icons",
          href: "https://boxicons.com/"
        });
      });
    });
    const customShapes = this.plugin.settings.customShapes;
    contentEl.createEl("h3", {
      text: "Custom shapes"
    });
    new import_obsidian2.Setting(contentEl).addButton((button) => button.setButtonText("Add shape").onClick(() => {
      let key = "shape";
      let i = 1;
      while (customShapes[key] !== void 0) {
        key = `shape-${i}`;
        i++;
      }
      this.plugin.settings.customShapes[key] = "";
      this.plugin.saveSettings();
      this.display();
    }).setCta());
    Object.entries(customShapes).forEach(([key, value]) => {
      this.displayShape(key, value, true);
    });
    contentEl.createEl("h3", {
      text: "Default shapes"
    });
    Object.entries(DEFAULT_SHAPES).forEach(([key, value]) => {
      this.displayShape(key, value, false);
    });
  }
  displayShape(key, value, editable = true) {
    const setting = new import_obsidian2.Setting(this.contentEl).addText((text) => {
      text.setValue(key).setPlaceholder("Shape name");
      if (editable) {
        text.onChange((newKey) => {
          this.plugin.settings.customShapes[newKey] = value;
          delete this.plugin.settings.customShapes[key];
          key = newKey;
          this.plugin.saveSettings();
        });
      } else {
        text.setDisabled(true);
      }
    }).addTextArea((text) => {
      text.setValue(value).setPlaceholder("Shape HTML");
      if (editable) {
        text.onChange((newValue) => {
          newValue = newValue.trim();
          this.plugin.settings.customShapes[key] = newValue;
          value = newValue;
          this.plugin.saveSettings();
          this.updateShape(setting, newValue);
        });
      } else {
        text.setDisabled(true);
      }
    });
    setting.addExtraButton((button) => button.setIcon("wand").setTooltip("Test confetti").onClick(() => {
      if (!isValidHTML(value))
        return;
      this.plugin.party.confetti(button.extraSettingsEl, {
        shapes: [key],
        count: this.plugin.party.variation.range(10, 20)
      });
    })).addExtraButton((button) => button.setIcon("star").setTooltip("Test sparkles").onClick(() => {
      if (!isValidHTML(value))
        return;
      this.plugin.party.sparkles(button.extraSettingsEl, {
        shapes: [key],
        count: this.plugin.party.variation.range(8, 16)
      });
    }));
    setting.addExtraButton((button) => {
      button.setIcon("trash");
      if (editable) {
        button.setTooltip("Delete shape").onClick(() => {
          if (!value)
            this.deleteShape(key);
          else {
            new ConfirmationModal(this.app, "Delete shape?", () => {
              this.deleteShape(key);
            });
          }
        });
      } else {
        button.setDisabled(true);
        button.extraSettingsEl.style.opacity = "0";
      }
    });
    this.updateShape(setting, value);
  }
  deleteShape(name) {
    delete this.plugin.settings.customShapes[name];
    this.plugin.saveSettings();
    this.display();
  }
  updateShape(setting, shape) {
    setting.setTooltip("");
    setting.nameEl.classList.remove("party-shape-resized");
    setting.nameEl.empty();
    if (!isValidHTML(shape))
      return;
    setting.nameEl.innerHTML = shape;
    const el = setting.nameEl.firstChild;
    if (!el)
      return;
    applyColor(el, COLOR_NORMAL);
    if (el.clientWidth > SHAPE_MAX_SIZE || el.clientHeight > SHAPE_MAX_SIZE) {
      setting.setTooltip("Preview is resized");
      setting.nameEl.classList.add("party-shape-resized");
      applyColor(el, COLOR_RESIZED);
    }
  }
};

// src/settings.ts
var EFFECTS = ["none", "confetti", "sparkles"];
var EFFECT_CONFIGS = [
  "checkbox",
  "task",
  "dataview",
  "kanban"
];
var DEFAULT_CONFIGURATION = {
  effect: "confetti",
  target: "element",
  count: [],
  speed: [],
  size: [],
  spread: [],
  lifetime: [],
  colors: [],
  shapes: []
};
var DEFAULT_SETTINGS = {
  effectConfigs: Object.fromEntries(EFFECT_CONFIGS.map((effectConfig) => [
    effectConfig,
    structuredClone(DEFAULT_CONFIGURATION)
  ])),
  customShapes: {}
};
var ObsidianPartySettingsTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", {
      text: "Settings for Obsidian party plugin"
    });
    this.addEffectSetting("checkbox", "Checkbox effect", "The effect that will be displayed when checkbox is marked as completed (regular markdown checkbox)");
    if (app.plugins.enabledPlugins.has("obsidian-tasks-plugin")) {
      this.addEffectSetting("task", "Task effect", "The effect that will be displayed when marking the task as completed (obsidian-tasks-plugin)");
    }
    if (app.plugins.enabledPlugins.has("dataview")) {
      this.addEffectSetting("dataview", "Dataview effect", "The effect that will be displayed when marking the task as completed (dataview plugin)");
    }
    if (app.plugins.enabledPlugins.has("obsidian-kanban")) {
      this.addEffectSetting("kanban", "Kanban effect", "The effect that will be displayed when marking the card as completed (obsidian-kanban plugin)");
    }
    const shapesModal = new CustomShapesModal(this.plugin);
    new import_obsidian3.Setting(containerEl).setName("Custom shapes").setDesc("Custom shapes that can be used in the effect configuration.").addExtraButton((button) => button.setIcon("gear").setTooltip("Edit custom shapes").onClick(() => {
      shapesModal.open();
    }));
    containerEl.createEl("h2", {
      text: "Donate to the developer \u{1F49D}"
    });
    containerEl.createDiv({ cls: "obsidian-party-donate" }, (el) => {
      el.createEl("button", void 0, (el2) => {
        el2.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M19.554 9.488c.121.563.106 1.246-.04 2.051-.582 2.978-2.477 4.466-5.683 4.466h-.442a.666.666 0 0 0-.444.166.72.72 0 0 0-.239.427l-.041.189-.553 3.479-.021.151a.706.706 0 0 1-.247.426.666.666 0 0 1-.447.166H8.874a.395.395 0 0 1-.331-.15.457.457 0 0 1-.09-.363c.061-.373.148-.938.267-1.689.117-.75.206-1.314.267-1.689s.15-.938.272-1.685c.121-.748.212-1.31.271-1.685.033-.248.179-.371.433-.371h1.316c.893.013 1.682-.057 2.375-.211 1.172-.262 2.134-.744 2.886-1.449.685-.637 1.203-1.462 1.56-2.473.162-.47.277-.917.352-1.338.006-.041.014-.066.025-.074.008-.011.022-.014.035-.011a.378.378 0 0 1 .062.035c.524.398.854.941.98 1.632zm-1.728-2.836c0 .717-.154 1.508-.465 2.374-.537 1.562-1.547 2.618-3.037 3.168-.758.269-1.602.408-2.535.425 0 .006-.301.007-.904.007l-.903-.007c-.672 0-1.067.32-1.187.964-.013.053-.298 1.83-.855 5.329-.008.066-.048.102-.121.102H4.854a.473.473 0 0 1-.369-.165.469.469 0 0 1-.115-.39L6.702 3.664a.784.784 0 0 1 .276-.483.785.785 0 0 1 .519-.19h6.014c.228 0 .555.044.979.131.428.084.801.194 1.123.321.718.274 1.266.688 1.645 1.237.379.552.568 1.207.568 1.972z"></path></svg><span>PayPal</span>`;
        el2.addEventListener("click", () => {
          this.plugin.party.sparkles(el2, {
            shapes: ["heart"],
            color: ["#E31313", "#1040C1", "#E22EFF", "#0FFF00"].map((color) => this.plugin.party.Color.fromHex(color))
          });
          setTimeout(() => {
            window.open("https://www.paypal.com/donate/?hosted_button_id=89AG7T2HQA8K6", "_blank");
          }, 500);
        });
      });
      el.createEl("button", void 0, (el2) => {
        el2.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="m18.5 5-1.224-2.447A1 1 0 0 0 16.382 2H7.618a1 1 0 0 0-.894.553L5.5 5H3v2h18V5h-2.5zM6.734 21.142c.071.492.493.858.991.858h8.551a1 1 0 0 0 .99-.858L19 9H5l1.734 12.142zM16 12l-.714 5H8.714L8 12h8z"></path></svg><span>Buy me a coffee</span>`;
        el2.addEventListener("click", () => {
          this.plugin.party.sparkles(el2, {
            shapes: ["heart"],
            color: ["#E31313", "#ff6937", "#E22EFF", "#0FFF00"].map((color) => this.plugin.party.Color.fromHex(color))
          });
          setTimeout(() => {
            window.open("https://www.buymeacoffee.com/shap", "_blank");
          }, 500);
        });
      });
    });
  }
  addEffectSetting(optionName, name, desc) {
    if (Array.isArray(desc)) {
      const d = new DocumentFragment();
      d.append(...desc);
      desc = d;
    }
    const configModal = new EffectConfigurationModal(this.plugin, optionName, this);
    return new import_obsidian3.Setting(this.containerEl).setName(name).setDesc(desc).addDropdown((dropdown) => dropdown.addOptions(Object.fromEntries(EFFECTS.map((effect) => [
      effect,
      capitalize(effect)
    ]))).setValue(this.plugin.settings.effectConfigs[optionName].effect).onChange((value) => {
      this.plugin.settings.effectConfigs[optionName].effect = value;
      this.plugin.saveSettings();
    })).addExtraButton((button) => button.setIcon("gear").setTooltip("Effect configuration").onClick(() => {
      configModal.open();
    }));
  }
};

// src/effectConfig.ts
var TARGETS = ["mouse", "element", "line", "note", "app"];
var RANGE_DEFAULTS = {
  confetti: {
    count: [20, 40],
    speed: [300, 600],
    size: [0.8, 1.2],
    spread: [35, 45]
  },
  sparkles: {
    count: [10, 20],
    speed: [100, 200],
    size: [0.8, 1.8],
    lifetime: [1, 2]
  },
  none: {}
};
var RANGE_CONFIGS = [
  "count",
  "speed",
  "size",
  "spread",
  "lifetime"
];
var EffectConfigurationModal = class extends import_obsidian4.Modal {
  constructor(plugin, optionName, settingsTab) {
    super(plugin.app);
    this.plugin = plugin;
    this.option = this.plugin.settings.effectConfigs[optionName];
    this.optionName = optionName;
    this.settingsTab = settingsTab;
  }
  onOpen() {
    this.display();
  }
  display() {
    const { contentEl } = this;
    contentEl.empty();
    new import_obsidian4.Setting(contentEl).addExtraButton((button) => {
      button.setIcon("reset").setTooltip("Reset to default").onClick(() => {
        new ConfirmationModal(this.plugin.app, "Reset to default?", () => {
          const option = structuredClone(DEFAULT_CONFIGURATION);
          this.option = option;
          this.plugin.settings.effectConfigs[this.optionName] = option;
          this.plugin.saveSettings();
          this.display();
          this.settingsTab.display();
          new import_obsidian4.Notice("Reset to default");
        });
      });
    }).addExtraButton((button) => button.setIcon("copy").setTooltip("Copy").onClick(() => {
      navigator.clipboard.writeText(JSON.stringify(this.option, null, 2));
      new import_obsidian4.Notice("Copied config to clipboard");
    })).addExtraButton((button) => button.setIcon("paste").setTooltip("Paste").onClick(() => {
      navigator.clipboard.readText().then((text) => {
        try {
          const option = JSON.parse(text);
          Object.keys(DEFAULT_CONFIGURATION).forEach((key) => {
            if (!(key in option))
              throw new Error();
          });
          new ConfirmationModal(this.plugin.app, "Confirm replacing config?", () => {
            this.option = option;
            this.plugin.settings.effectConfigs[this.optionName] = option;
            this.plugin.saveSettings();
            this.display();
            this.settingsTab.display();
            new import_obsidian4.Notice("Pasted config from clipboard");
          });
        } catch (e) {
          new import_obsidian4.Notice("Invalid config");
        }
      });
    })).infoEl.createEl("h2", { text: "Effect configuration" });
    contentEl.createEl("p", {
      text: "All settings here are optional. If you leave a setting blank, it will use the default value."
    });
    contentEl.createEl("p", {
      text: "If you set only one of the min or max values, then it will be used as fixed value instead of random in range."
    });
    new import_obsidian4.Setting(contentEl).setName("Type").setDesc("The type of effect to use.").addDropdown((dropdown) => dropdown.addOptions(Object.fromEntries(EFFECTS.map((effect) => [
      effect,
      capitalize(effect)
    ]))).setValue(this.option.effect).onChange((value) => {
      this.option.effect = value;
      this.plugin.saveSettings();
      this.display();
      this.settingsTab.display();
    }));
    new import_obsidian4.Setting(contentEl).setName("Target").setDesc("Where the effect should be emitted from.").addDropdown((dropdown) => {
      dropdown.addOptions(Object.fromEntries(TARGETS.map((t) => [t, capitalize(t)])));
      dropdown.setValue(this.option.target);
      dropdown.onChange((value) => {
        this.option.target = value;
        this.plugin.saveSettings();
      });
    });
    RANGE_CONFIGS.forEach((key) => {
      var _a;
      const s = new import_obsidian4.Setting(contentEl).setName(capitalize(key));
      [0, 1].forEach((i) => {
        s.addText((text) => {
          var _a2;
          text.setPlaceholder(i ? "Max" : "Min").setValue(((_a2 = this.option[key][i]) == null ? void 0 : _a2.toString()) || "").onChange((value) => {
            let val = value ? Number(value) : void 0;
            if (val && isNaN(val))
              val = void 0;
            this.option[key][i] = val;
            this.plugin.saveSettings();
          });
        });
      });
      if (this.option.effect !== "none") {
        if (RANGE_DEFAULTS[this.option.effect][key]) {
          s.setDesc("Default: " + ((_a = RANGE_DEFAULTS[this.option.effect][key]) == null ? void 0 : _a.join(" - ")));
        } else {
          s.setDesc(`Option is not available for ${this.option.effect} effect.`);
        }
      }
    });
    contentEl.createEl("h3", {
      text: "Shapes"
    });
    contentEl.createEl("p", {
      text: "Click on shape to toggle it. If no shapes are selected, only default shapes will be used."
    });
    const shapes = contentEl.createDiv({ cls: "party-shapes" });
    const enabledShapes = new import_obsidian4.Setting(shapes).setName("Enabled");
    const disabledShapes = new import_obsidian4.Setting(shapes).setName("Disabled");
    Object.entries(this.plugin.party.resolvableShapes).forEach(([name, shape]) => {
      if (!isValidHTML(shape))
        return;
      (this.option.shapes.includes(name) ? enabledShapes : disabledShapes).addButton((button) => {
        button.onClick(() => {
          this.option.shapes.includes(name) ? this.option.shapes.remove(name) : this.option.shapes.push(name);
          this.plugin.saveSettings();
          this.display();
        }).setTooltip(name);
        button.buttonEl.innerHTML = shape;
        const el = button.buttonEl.firstChild;
        if (!el)
          return;
        applyColor(el, "var(--text-normal)");
      });
    });
    [enabledShapes, disabledShapes].forEach((setting) => setting.addButton((button) => button.setDisabled(true).buttonEl.addClass("party-shape-empty")));
    contentEl.createEl("h3", {
      text: "Colors"
    });
    const palette = contentEl.createDiv({ cls: "party-palette" });
    for (let i = 0; i < this.option.colors.length + 1; i++) {
      this.addPicker(palette, i);
    }
    new import_obsidian4.Setting(contentEl).addButton((button) => button.setButtonText("Test \u{1F389}").onClick((evt) => this.plugin.triggerEffect(evt, this.optionName)));
  }
  addPicker(container, index) {
    const picker = import_pickr.default.create({
      el: container.createDiv(),
      container: this.containerEl,
      theme: "nano",
      position: "left-middle",
      default: this.option.colors[index] || "#FFFFFF",
      components: {
        preview: true,
        hue: true,
        interaction: {
          hex: true,
          rgba: true,
          input: true,
          cancel: true,
          save: true,
          clear: true
        }
      }
    }).on("save", (color, instance) => {
      if (color) {
        this.option.colors[index] = color == null ? void 0 : color.toHEXA().toString();
      }
      this.plugin.saveSettings();
      instance.hide();
      if (index == this.option.colors.length - 1) {
        this.display();
      }
    }).on("cancel", (instance) => {
      instance.setColor(this.option.colors[index] || null, true);
      instance.hide();
    }).on("clear", (instance) => {
      this.option.colors.splice(index, 1);
      this.plugin.saveSettings();
      this.display();
    });
    return picker;
  }
};

// src/main.ts
var party = window.party || require_lib();
var DEFAULT_SHAPES = {
  square: `<div style="height: 10px; width: 10px;"></div>`,
  rectangle: `<div style="height: 6px; width: 10px;"></div>`,
  circle: `<svg viewBox="0 0 2 2" width="10" height="10"><circle cx="1" cy="1" r="1"/></svg>`,
  star: `<svg viewBox="0 0 512 512" width="15" height="15"><polygon points="512,197.816 325.961,185.585 255.898,9.569 185.835,185.585 0,197.816 142.534,318.842 95.762,502.431 255.898,401.21 416.035,502.431 369.263,318.842"/></svg>`,
  diamond: `<svg width="12" height="12"><path d="m5.89 0-5 6 5 6 5-6-5-6Z"/></svg>`,
  triangle: `<svg width="14" height="14"><path d="m7 1 6.062 10.5H.938L7 1Z"/></svg>`,
  heart: `<svg viewBox="0 0 512 512" height="14" width="14"><path d="M316.722,29.761c66.852,0,121.053,54.202,121.053,121.041c0,110.478-218.893,257.212-218.893,257.212S0,266.569,0,150.801 C0,67.584,54.202,29.761,121.041,29.761c40.262,0,75.827,19.745,97.841,49.976C240.899,49.506,276.47,29.761,316.722,29.761z"/></svg>`,
  snowflake: `<svg width="14" height="14"><path d="M14 6.523h-2.555l.985-.984-.676-.676-1.66 1.66h-2.27l1.137-1.96 2.27-.61-.247-.922-1.351.36 1.281-2.215-.828-.473-1.277 2.211-.36-1.348-.926.246.61 2.266L7 6.047 5.867 4.078l.61-2.266-.926-.246-.36 1.348L3.914.704l-.828.472L4.367 3.39l-1.351-.36-.246.922 2.27.61 1.136 1.96h-2.27l-1.66-1.66-.676.676.985.984H0v.954h2.555l-.985.984.676.676 1.66-1.66h2.27l-1.137 1.96-2.27.61.247.922 1.351-.36-1.281 2.215.828.473 1.277-2.211.36 1.348.926-.246-.61-2.266L7 7.953l1.133 1.969-.61 2.265.926.247.36-1.348 1.277 2.21.828-.472-1.281-2.215 1.351.36.246-.922-2.27-.61-1.136-1.96h2.27l1.66 1.66.676-.676-.985-.984H14Zm0 0"/></svg>`,
  frog: `<svg width="14" height="14" viewBox="0 0 1280 1217"><path d="M770.4 1c-8.4 1.7-25.6 7.1-30.7 9.6-18.6 9.4-27.4 20.2-39.9 49.2-3.2 7.4-7.2 15.2-9 17.5-8 10-14.1 16.3-21.1 21.5-4.1 3.2-14.5 12-23.2 19.7-22.8 20.3-32.4 26.8-49.1 33.1-16 6-43.6 9.2-89.9 10.4-42.8 1.1-47.8 1.5-58.5 5-49.9 16.3-106.1 52-154.3 97.9l-7.8 7.5-10-4.9c-5.4-2.7-9.9-5.2-9.9-5.5 0-.3 3.5-4.6 7.7-9.5 13.1-15.4 28.7-37 38.7-53.7 7.7-13 9.6-16.8 9.6-20 0-3.6-.2-3.8-2.5-3.2-1.5.4-3.9 0-6-1-2.9-1.4-4.2-1.5-7.7-.5-14.7 3.9-40.5 23-70.5 52.3-7.9 7.6-14.3 13.6-14.3 13.2 0-.3 3.7-4.9 8.1-10.2 4.5-5.4 13.2-16.5 19.5-24.8 6.4-8.6 13.2-16.6 15.9-18.6 9.5-7.2 10.7-8.4 12.9-12.9 1.3-2.5 3.3-9.1 4.5-14.6 1.2-5.5 2.9-12 3.8-14.4 2.2-5.9 1.1-7.6-5.3-7.8-2.7 0-6.3-.4-8-.8-2.3-.5-4.4 0-8.5 2-7.8 3.9-26.4 23.2-44.1 45.5-8 10.2-19.2 24.3-24.9 31.5-13.5 17.1-21.3 25.8-27.3 30.6-5.7 4.6-9.1 5-10.8 1.4-1.6-3.5 1.5-22.2 4.2-25 1-1.1 3.5-6.5 5.4-12 1.9-5.5 6.9-18.2 11-28.3 4.2-10 7.5-18.6 7.4-19-.1-.4.4-2.5 1.1-4.6 1.4-3.9 1.2-11.3-.5-32.8l-.7-7.7-7.2-.6c-8-.8-9.9-.2-15.3 4.9-10.1 9.3-19.2 31.4-30.2 72.8-11 41.3-13.8 49.8-19.5 58.9-1.3 2-7.9 9.9-14.5 17.5-20.6 23.5-33.8 41.2-62.8 84.4C17.4 382.8 4.4 420.6.9 457c-1.6 17.1-.1 45.9 3.3 63.8.9 5 1.5 6.2 2.9 6 1.1-.2 3.1 1.9 6 6.2 6 8.8 10.5 11.8 20.5 13.4 14 2.2 18.9 1 46-11.8 4.9-2.4 13.1-6.8 18.2-9.9 5.1-3.1 9.2-5.1 9.2-4.4 0 .7-3.4 18.5-7.5 39.6l-7.4 38.3 4.1 6.7c2.3 3.6 5.3 8.2 6.7 10.1l2.5 3.5-3.3-3c-5.1-4.6-3.4-1.6 5.6 9.8 10.5 13.2 47.1 49.2 62.8 61.8 13 10.5 50.9 38.1 67 48.9 38.4 25.7 90.5 49.3 113.5 51.5 4.9.4 13.7 2.7 25.5 6.5 19.2 6.3 33.8 10.6 47.5 14 4.7 1.1 9.2 2.3 9.9 2.6 2.3.8-7.3 4.9-28.2 12-49.2 16.8-84 31.5-106.2 44.7-33 19.7-43.2 27.4-53.2 40.3-2.7 3.5-5.7 5.3-21 12.4-12.4 5.7-19.9 8.6-24.8 9.5-11.8 2.1-18.6 6-22.1 12.7-1.4 2.8-1.7 12.4-.5 16.8.4 1.5.1 4.3-1 7-1.9 5.1-1.6 7 1.1 7 1.4 0 2.1 1 2.5 3.7.4 2.1 1.2 4.9 1.8 6.3 2.1 4.3 17.9 19.3 25.7 24.3 4.1 2.7 13.4 8.7 20.5 13.3 20.9 13.7 48.4 26.8 77 36.7 5.5 1.9 16.3 6.2 24 9.4 7.7 3.3 20.1 8.1 27.5 10.7 7.4 2.7 19.1 6.8 26 9.3 17.9 6.5 38.2 11.3 72.1 17.2 27.1 4.7 30.1 5 35 4 3.6-.8 11.6-1 23.9-.6 27.6.8 38.6 4.1 58.4 17.2 5.3 3.5 15.3 11.1 22.2 16.9 14.5 12.1 27.7 22.2 38.4 29.3 14.3 9.6 58.4 35.6 65.9 39 4.2 1.9 8.7 4 10.1 4.8 1.4.7 4.1 1.6 6.2 2 4.5.9 9.3-2.3 10.7-6.9.5-1.7 1.2-3.9 1.6-4.9.5-1.2.2-1.7-.8-1.7-.8 0-2.9-2.1-4.5-4.7-3-4.6-18.9-20.7-32.2-32.6l-6.5-5.9 6.3 4.7c3.4 2.6 11 9.2 16.8 14.7 9.3 8.9 12.9 11.1 12.9 8.2 0-.5.4-1.6.9-2.3.7-1.1-1.3-3.6-8.1-10-10.8-10.3-18.9-16.2-43.3-31.6-18.5-11.7-26.8-18.5-33.6-27.7-1.9-2.5-3.9-6-4.5-7.8-1-2.7-.9-3.4 1-5.4 2.7-2.8 10.8-4 38.6-5.7 21.9-1.3 119.3-.2 121.3 1.3 2.7 2.2 13.2-1.5 13.2-4.6 0-.8-1.6-3.3-3.5-5.6s-3.5-5-3.5-6c0-1.8-4.6-3.5-5.5-1.9-.3.4-3.1-.1-6.3-1.2-14.9-5.2-31.8-7.6-73.7-10.5-23.5-1.6-26.1-1.6-43.5-.1-10.2 1-21.4 1.7-25 1.7-11.4 0-36-7-36-10.3 0-1.6 3.2-4.6 8-7.5 4.5-2.6 32.5-12.7 40.7-14.6 3.4-.8 7.5-2.3 9-3.4 6-4.2 16.1-8.5 35.8-15.2 23.5-8 31.6-11.8 40.6-19 8.1-6.5 8.6-7.4 6.5-11.7-.9-1.8-1.6-4.4-1.6-5.7v-2.3l-16.2.3c-12.9.1-19 .7-29.5 2.8-22.2 4.4-45.9 11.9-75.8 23.8-23.8 9.5-28.7 11.2-42.5 14.4-16.9 3.8-32.5 5-48.7 3.6-7.6-.7-16-1.8-18.8-2.6l-5-1.3 2.8-1.2c1.6-.6 3-1.1 3.2-1.1 1.2 0 34.5-14.3 47-20.2 33.2-15.7 50.6-26.6 67.5-42l7.3-6.7-1.2-5.5c-.7-3.1-2-6.5-2.9-7.6-10.1-12.5-62.1 8.2-143.8 57.2-13.3 8-24.1 13.8-25.6 13.8-4.9 0-61.5-9.9-80.2-14-25.2-5.6-36.4-9.2-41.1-13.5-2-1.9-4.5-3.7-5.6-4-2.1-.7-2.4-3.2-.6-5.6 2.2-2.9 24.5-9.2 46.7-13.3 4.7-.8 21.3-3.6 37-6.1 47.6-7.6 69.4-13.4 91.7-24.4 13.1-6.5 23.6-13.6 35.7-24.4 4.5-4 14-12 21.1-17.8 16.1-13.2 28-25.5 32.4-33.9 3.3-6.2 3.4-6.5 2.8-15.6-.5-8-1-10.2-3.8-15.5-3.1-5.8-11.7-15.3-18.6-20.6-1.8-1.4-11.6-6.5-21.9-11.4-24.3-11.6-36-19.3-50.4-33.3-18.8-18.3-29.3-26.1-56.5-42.2-8.2-4.8-17.1-10.5-19.8-12.5l-4.7-3.8 4.2-.5c2.4-.3 11.1-1.2 19.3-2.1 49.3-5.2 97.9-18 154.5-40.7 26.3-10.6 50-24.6 73.5-43.5 12.6-10.1 36.4-32.9 50.2-48.2 10.1-11.1 32.8-40.7 42.6-55.6 4-6.1 5.7-8 5.3-6-12.5 51.8-15.1 106-6.5 134.3 2.5 8 9.6 21.4 13.9 26.2 1.8 1.9 2.7 2.7 2 1.7-.7-.9-1-1.7-.8-1.7.3 0 4.3 2.5 8.9 5.5 17.1 11.3 41.2 16.1 102.9 20.6 45.1 3.2 47 3.3 73.4 1.4 27.1-1.9 41.5-1.7 54.1 1 11 2.3 11.8 2.9 7.2 5.1-4.1 2-4.3 2.3-2.4 4.7 1 1.4 1.8 1.4 5.3.5 3.4-.9 5.3-.8 10.5.6 9 2.5 32 11.8 47.9 19.3 23 11 43.1 19.9 53.5 23.8 12.4 4.6 31.2 9.5 38.5 9.9 3 .2 8.3.9 11.7 1.7 6.1 1.3 6.2 1.3 6.5 4.8.2 3 .7 3.7 2.8 3.9 5.1.8 17.4-5.4 17.8-8.9.1-.8.5-3.1.8-5.1.5-2.8.1-4.6-1.6-7.2-8.2-13.4-46-33-101.4-52.7-14-5-17.3-6.5-15.5-7 9.6-2.8 46.1-15.1 58.4-19.6 32.6-12.1 63.9-26.3 81.3-37.1 4.2-2.6 9.9-5.8 12.5-7.1 11.4-5.5 20.8-17.8 19.3-25.1-.9-4.5-5.5-10-10.1-12.1-16.2-7.4-67.6 8.6-133 41.3-7.3 3.7-11.4 5.3-10.5 4.2.8-1.1 5.6-6.6 10.5-12.4 5-5.8 11-13 13.5-16 6.5-8.2 18.4-20.3 27.5-28 7.6-6.4 8.4-7.4 14.5-19.4 5.4-10.7 6.5-13.6 6.8-19 .6-8.7-.5-10.3-7.3-11.1-6.7-.9-10.6.5-21.9 7.6-21.9 13.9-55 41.8-103.5 87.3l-22.3 21-11.4-3.8c-6.3-2-11.4-3.9-11.4-4 0-.2 1.4-3.4 3.1-7.2 1.8-3.8 6.1-13.9 9.6-22.4 3.6-8.5 8-19.1 9.8-23.5 1.9-4.4 4.1-12.1 5-17 .9-5 2.5-13.2 3.6-18.3 1-5.1 1.9-10.8 1.9-12.8 0-4.5-2.3-10-4.8-11.3-3.2-1.7-9.2-1.3-12.7.9-11.1 6.9-30.2 42.8-48.9 91.8-2.2 5.6-3.2 7.2-4.5 6.8-5.3-1.7-27.5-6.8-38.6-9-24.2-4.7-31-5.5-50-6-11.9-.3-20.9-1-24-1.9-10.7-3-20.9-10.4-16.4-11.9 1.6-.5-.5-4.5-4.3-8-3.2-3-3.3-4.6-1.4-14 2.5-11.8 6.5-19.1 29.6-54.8 4.8-7.4 10.1-16.9 11.8-21 1.6-4.1 5-12.5 7.6-18.5 8.4-20.4 9.7-32 5-45-4-11.2-4.1-10.5 2.7-15.5 8.5-6.3 37.8-36.5 47.5-49 10.1-13 24.4-34.3 35.4-52.6 4.6-7.6 12.4-20.1 17.2-27.8 4.9-7.6 10-16.6 11.4-20 2.8-6.6 5.5-12.1 28.1-56.6 21.8-43.1 28.9-62.7 32.3-89 .6-4.7 1.8-12.5 2.7-17.3 1.4-7.5 1.4-10.1.4-16.5-1.9-12.8-10.1-27.3-21-37.5-2.8-2.6-5.1-5-5.1-5.2 0-.3 1.4-.5 3-.5 1.7 0 3-.3 3-.8-.1-2.2-13.6-10.1-28.9-16.7-21.6-9.5-27.8-11.5-46.6-15.3-30.4-6.3-46.5-6.6-71.2-1.3-35.5 7.6-56 8-92.8 1.6-30.4-5.3-41-6.3-50.1-4.5zm294.1 151.6c-1.5 4.9-4.4 13.2-6.7 18.4-5.9 14-20 44.1-20.4 43.7-.2-.2 2.8-7.5 6.6-16.2 6.9-15.5 18.5-44.3 21-51.8 2.4-7.5 2-2.9-.5 5.9zM742 1075.4c9.2.8 18.7 2.3 21.5 3.2l5 1.8-3.5.7c-8.7 1.9-32.9 3.1-40.6 2.1-44.3-6-61.5-8.8-58.8-9.4 4.8-1.2 58.6 0 76.4 1.6z"/>
<!--    *quack*    -->
</svg>`
};
var ObsidianParty2 = class extends import_obsidian5.Plugin {
  constructor() {
    super(...arguments);
    this.settings = DEFAULT_SETTINGS;
    this.configs = {};
    this.mousePos = { x: 0, y: 0 };
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      window.party = party;
      this.party = party;
      this.registerDomEvent(window, "click", (evt) => {
        const target = evt.target;
        if (target && target.instanceOf(HTMLElement)) {
          let t;
          if (document.body.contains(target)) {
            t = party.Rect.fromElement(target);
          } else {
            t = evt;
          }
          if (target.hasClass("confetti"))
            party.confetti(t);
          if (target.hasClass("sparkles"))
            party.sparkles(t);
        }
      });
      this.registerDomEvent(window, "mousemove", (evt) => {
        this.mousePos = { x: evt.clientX, y: evt.clientY };
      });
      this.setupShapes();
      this.setupObserver();
      this.addSettingTab(new ObsidianPartySettingsTab(this.app, this));
    });
  }
  onunload() {
    var _a;
    (_a = this.observer) == null ? void 0 : _a.disconnect();
    delete this.observer;
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
      this.setupObserver();
      this.configs = {};
      this.setupShapes();
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
      const unknownSettings = this.settings;
      const taskEffect = unknownSettings.taskEffect;
      if (taskEffect !== void 0) {
        EFFECT_CONFIGS.forEach((optionName) => {
          unknownSettings.effectConfigs[optionName].effect = taskEffect;
        });
        delete unknownSettings.taskEffect;
      }
      [
        ["taskEffectConfig", "task"],
        ["dataviewEffectConfig", "dataview"],
        ["checkboxEffectConfig", "checkbox"]
      ].forEach(([oldName, newName]) => {
        const oldConfig = unknownSettings[oldName];
        if (oldConfig !== void 0) {
          unknownSettings.effectConfigs[newName] = oldConfig;
          delete unknownSettings[oldName];
        }
      });
      EFFECT_CONFIGS.forEach((optionName) => {
        unknownSettings.effectConfigs[optionName] = Object.assign({}, DEFAULT_CONFIGURATION, unknownSettings.effectConfigs[optionName]);
      });
    });
  }
  setupShapes() {
    for (const prop of Object.getOwnPropertyNames(party.resolvableShapes)) {
      delete party.resolvableShapes[prop];
    }
    Object.assign(party.resolvableShapes, DEFAULT_SHAPES, Object.fromEntries(Object.entries(this.settings.customShapes).filter(([name, value]) => name && isValidHTML(value))));
  }
  setupObserver() {
    var _a;
    if (Object.values(this.settings.effectConfigs).every((config) => config.effect === "none")) {
      (_a = this.observer) == null ? void 0 : _a.disconnect();
      delete this.observer;
      return;
    }
    if (this.observer)
      return;
    this.observer = new MutationObserver((mutations) => {
      document.querySelectorAll(".view-content input[type=checkbox]:not(.party-patched)").forEach((checkbox) => {
        checkbox.addEventListener("click", (evt) => {
          if (checkbox.checked) {
            const setting = checkbox.closest(".plugin-tasks-list-item") && !checkbox.closest(".has-list-bullet") ? "task" : checkbox.closest(".dataview") ? "dataview" : "checkbox";
            this.triggerEffect(evt, setting);
          }
        });
        checkbox.classList.add("party-patched");
      });
      mutations.forEach((mutation) => {
        if (mutation.addedNodes.length !== 1)
          return;
        const node = mutation.addedNodes[0];
        if ((node == null ? void 0 : node.instanceOf(HTMLElement)) && node.classList && node.classList.contains("kanban-plugin__item-wrapper") && node.find(".is-complete")) {
          const evt = new MouseEvent("click", {
            view: window,
            bubbles: true,
            cancelable: true
          });
          [
            ["target", node],
            ["clientX", this.mousePos.x],
            ["clientY", this.mousePos.y]
          ].forEach(([key, value]) => {
            Object.defineProperty(evt, key, {
              value,
              enumerable: true
            });
          });
          this.triggerEffect(evt, "kanban");
        }
      });
    });
    this.observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  }
  taskEffect(evt) {
    this.triggerEffect(evt, "task");
  }
  triggerEffect(evt, optionName) {
    if (this.settings.effectConfigs[optionName].effect === "none")
      return;
    const effectConfig = this.getConfig(optionName);
    let target;
    let element = evt.target;
    if (!(element == null ? void 0 : element.instanceOf(HTMLElement)))
      element = void 0;
    switch (this.settings.effectConfigs[optionName].target) {
      case "element": {
        if (element && document.body.contains(element)) {
          target = party.Rect.fromElement(element);
        } else
          target = evt;
        break;
      }
      case "line": {
        const line = (element == null ? void 0 : element.closest(".cm-line")) || (element == null ? void 0 : element.closest("li")) || (element == null ? void 0 : element.closest(".setting-item"));
        if (line && (line == null ? void 0 : line.instanceOf(HTMLElement)) && document.body.contains(line)) {
          target = party.Rect.fromElement(line);
        } else if (element && document.body.contains(element)) {
          target = party.Rect.fromElement(element);
        } else
          target = evt;
        break;
      }
      case "note": {
        const note = (element == null ? void 0 : element.closest(".view-content")) || document.querySelector(".workspace-leaf.mod-active .view-content");
        if (note && (note == null ? void 0 : note.instanceOf(HTMLElement))) {
          target = party.Rect.fromElement(note);
        } else
          target = evt;
        break;
      }
      case "app":
        target = document.body;
        break;
      default:
        target = evt;
    }
    switch (this.settings.effectConfigs[optionName].effect) {
      case "confetti":
        party.confetti(target, effectConfig);
        return;
      case "sparkles":
        party.sparkles(target, effectConfig);
        return;
    }
  }
  convertConfig(config) {
    const cfg = {};
    RANGE_CONFIGS.forEach((key) => {
      if (config[key][0] && config[key][1])
        cfg[key] = party.variation.range(config[key][0], config[key][1]);
      else if (config[key].find((value) => value))
        cfg[key] = config[key].find((value) => value);
    });
    const shapes = config.shapes.filter((s) => Object.keys(party.resolvableShapes).includes(s));
    if (shapes.length)
      cfg.shapes = shapes;
    if (config.colors.length)
      cfg.color = config.colors.map((color) => party.Color.fromHex(color));
    return cfg;
  }
  getConfig(optionName) {
    if (this.configs[optionName] === void 0) {
      this.configs[optionName] = this.convertConfig(this.settings.effectConfigs[optionName]);
    }
    return this.configs[optionName];
  }
};
/*! Pickr 1.8.2 MIT | https://github.com/Simonwep/pickr */
